{"version":3,"sources":["Algorithms/Dijkstra.js","PathfindingVisualizer/Node/Node.jsx","Algorithms/BFS.js","Algorithms/DFS.js","Algorithms/IDDFS.js","Algorithms/Astar.js","Algorithms/BiDirectional.js","Algorithms/GreedyBestFS.js","Mazes/SimpleMaze.js","Algorithms/GenerateMaze.js","Mazes/RecursiveDivision.js","PathfindingVisualizer/PathfindingVisualizer.jsx","Algorithms/AlgorithmInfo.js","App.js","serviceWorker.js","index.js"],"names":["heap","Node","this","props","col","row","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","Heap","a","b","distance","visitedNodesInOrder","node","push","getAllNodes","heapify","length","closestNode","pop","Infinity","visited","updateUnvisitedNeighbors","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","updateItem","getAllFourNeighbors","neighbors","filter","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift","getNodesInShortestPathOrderBiDirectional","array","element","arrayContainsGivenNode","BFS","q","Queue","enqueue","currNode","dequeue","unvisitedNeighbours","queue","offset","getLength","isEmpty","item","slice","peek","undefined","finished","DFS","DFSHelper","neighbour","yetToVisit","INTERSECT_NODE_ROW","INTERSECT_NODE_COL","MAX_DEPTH","resetVisitedNodes","DLS","limit","includes","Astar","fCost","gCost","hCost","initializeCosts","console","log","manhattanDistance","euclideanDistance","colA","colB","rowA","rowB","Math","abs","aSquared","pow","bSquared","isIntersecting","visitedByStart","visitedByFinish","getUnvisitedNeighborsStart","getUnvisitedNeighborsFinish","greedyBestFS","size","getRndInteger","min","max","floor","random","getFrontierNodes","list","numRows","numCols","isVisited","getNeighbourNodes","getRandomInt","ceil","nodesToBeWalls","typeOfMaze","recursiveDivision","rowStart","rowEnd","colStart","colEnd","orientation","type","recursiveDivisionMaze","possibleRows","number","possibleCols","randomRowIndex","randomColIndex","currentRow","colRandom","switchType","currentCol","rowRandom","maze1","maze2","maze3","NUM_COLUMNS","NUM_ROWS","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","mouseIsPressed","startIsPressed","finishIsPressed","isRunning","slideNumber","PathfindingVisualizer","state","createNode","getInitalGrid","setState","window","onload","displayNote","document","getElementById","onmouseleave","isBiDirectional","i","setTimeout","animateShortestPath","algo","clearGridKeepWalls","IDDFS","qStart","qFinish","currStartNode","currFinishNode","unvisitedNeighborsStart","unvisitedNeighborsFinish","biDirectional","biDirectionalHelper","animateAlgorithm","nodesInShortestPathOrder1","nodesInShortestPathOrder2","findSecondBranch","concat","firstBranch","rightBesideIntersectNode","rightWithinBounds","belowBesideIntersectNode","belowWithinBounds","leftBesideIntersectNode","leftWithinBounds","aboveBesideIntersectNode","aboveWithinBounds","nodesInShortestPathOrderTestRight","nodesInShortestPathOrderTestBelow","nodesInShortestPathOrderTestLeft","nodesInShortestPathOrderTestAbove","maze","clearGrid","clearGridHelper","simpleMaze","animateWalls","newgrid","ogGrid","clearGridHelperKeepWalls","location","reload","modal","style","display","btn","span","getElementsByClassName","onclick","event","target","changeText","next","innerHTML","HTMLHelper","prevBtn","nextBtn","backgroundColor","disabled","MAXSLIDE","info","scrollTop","displayAlgorithmInfo","animations","j","randomRow","randomCol","listOfFrontierNodes","randomFrontierNode","neighbours","randomNeighbour","generateMazeAnimations","onClick","refreshPage","visualizeWalls","openHelpMenu","fontSize","marginTop","openAlgoMenu","visualizeAlgorithm","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","App","title","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9a7ced04.chunk.js","sourcesContent":["//run dijkstra's algorithm\n//TODO use a min heap for unvisitedNodes!!!!\nimport Heap from \"heap\";\n\nvar heap;\n\nexport function dijkstra(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n\n  heap = new Heap(function(a, b) {\n    return a.distance - b.distance;\n  });\n\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n\n  //const unvisitedNodes = getAllNodes(grid);\n  getAllNodes(grid);\n  //heap.push(startNode);\n\n  heap.heapify();\n  while (heap.length !== 0) {\n    //shift returns first element in array (with the smallest distance)\n    const closestNode = heap.pop();\n    //console.log(closestNode);\n\n    if (closestNode.isWall) continue;\n\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n\n    closestNode.visited = true;\n\n    //append closest node to those visited in order\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n\n  //   while (unvisitedNodes.length !== 0) {\n  //     sortNodesByDistance(unvisitedNodes);\n\n  //     //shift returns first element in array (with the smallest distance)\n  //     const closestNode = unvisitedNodes.shift();\n\n  //     if (closestNode.isWall) continue;\n\n  //     if (closestNode.distance === Infinity) return visitedNodesInOrder;\n\n  //     closestNode.visited = true;\n\n  //     //append closest node to those visited in order\n  //     visitedNodesInOrder.push(closestNode);\n  //     if (closestNode === finishNode) return visitedNodesInOrder;\n  //     updateUnvisitedNeighbors(closestNode, grid);\n  //   }\n}\n\n// Return all the nodes in the given grid\n// puts all nodes into the heap\nfunction getAllNodes(grid) {\n  //const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      //nodes.push(node);\n      heap.push(node);\n    }\n  }\n\n  //return nodes;\n}\n\n// //sort by smallest to largest distance\n// function sortNodesByDistance(unvisitedNodes) {\n//   unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n// }\n\n// update the distance for all the neighbors of node in grid\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    if (neighbor.distance > node.distance + 1) {\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n      //heap.push(neighbor);\n      heap.updateItem(neighbor);\n    }\n  }\n}\n\nexport function getAllFourNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors;\n}\n\n// return all the neighbors of node from grid\nexport function getUnvisitedNeighbors(node, grid) {\n  var neighbors = getAllFourNeighbors(node, grid);\n  // get rid of neighbors that were already visited\n  return neighbors.filter(neighbor => !neighbor.visited);\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  //  if (!finishNode.visited || finishNode.isWall) return [];\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n\nexport function getNodesInShortestPathOrderBiDirectional(\n  node,\n  visitedNodesInOrder\n) {\n  //  if (!node.visited || node.isWall) return [];\n  if (!arrayContainsGivenNode(visitedNodesInOrder, node)) return [];\n  const nodesInShortestPathOrder = [];\n  let currentNode = node;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n\nfunction arrayContainsGivenNode(array, node) {\n  if (array === []) return false;\n  for (let element of array) {\n    if (element.row === node.row && element.col === node.col) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// //ASSUME: all nodes in the grid have a distance of infinity to begin with\n// function dijkstraCommented(grid, startNode, finishNode) {\n//   //check for illegal inputs\n//   if (!grid || !startNode || !finishNode || startNode === finishNode) {\n//     return false;\n//   }\n\n//   //create a priority queue of nodes where heap.pop() is the node with the smallest distance\n//   var heap = new Heap(function(a, b) {\n//     return a.distance - b.distance;\n//   });\n\n//   const visitedNodesInOrder = [];\n\n//   //initialize the start nodes distance to 0\n//   startNode.distance = 0;\n\n//   //add all the nodes in the grid to the heap\n//   for (const row of grid) {\n//     for (const node of row) {\n//       heap.push(node);\n//     }\n//   }\n//   //create a min-heap\n//   heap.heapify();\n\n//   while (heap.length !== 0) {\n//     const closestNode = heap.pop();\n\n//     //if the node is a wall, repeat the loop again\n//     if (closestNode.isWall) continue;\n\n//     //if the closest node has a distance of infinity, this means there is no shortest path to the finish node\n//     if (closestNode.distance === Infinity) return visitedNodesInOrder;\n\n//     //mark the node as visited and add it to the list of visited nodes\n//     closestNode.visited = true;\n//     visitedNodesInOrder.push(closestNode);\n\n//     //if we arrived at the finish node, return all the nodes we have visited\n//     if (closestNode === finishNode) return visitedNodesInOrder;\n\n//     //get all the neighbors surrounding the node\n//     const unvisitedNeighbors = getUnvisitedNeighbors(closestNode, grid);\n\n//     //for all unvisited neighbors update their distances respectively\n//     for (const neighbor of unvisitedNeighbors) {\n//       if (neighbor.distance > closestNode.distance + 1) {\n//         neighbor.distance = closestNode.distance + 1;\n//         neighbor.previousNode = closestNode;\n//         heap.updateItem(neighbor);\n//       }\n//     }\n//   }\n// }\n","import React, { Component } from \"react\";\nimport \"./Node.css\";\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      row,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp\n    } = this.props;\n\n    var extraClassName = \"\";\n    if (isFinish) {\n      extraClassName = \"node-finish\";\n    } else if (isStart) {\n      extraClassName = \"node-start\";\n    } else if (isWall) {\n      extraClassName = \"node-wall\";\n    }\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}\n      />\n    );\n  }\n}\n\nexport const DEFAULT_NODE = {\n  row: 0,\n  col: 0\n};\n","import { getUnvisitedNeighbors } from \"../Algorithms/Dijkstra\";\n//import Queue from \"../Components/Queue\";\n\nexport function BFS(grid, startNode, finishNode) {\n  //check for illegal inputs\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  const visitedNodesInOrder = [];\n  var q = new Queue(); //create a new queue\n\n  //initialize the start node distance to 0 and add it to the queue\n  startNode.distance = 0;\n  q.enqueue(startNode);\n\n  while (q.length !== 0) {\n    var currNode = q.dequeue();\n\n    //guard against invalid nodes\n    if (typeof currNode === \"undefined\") return visitedNodesInOrder;\n\n    //if the node is a wall, repeat the loop again\n    if (currNode.isWall) continue;\n\n    currNode.distance = 0;\n    currNode.visited = true;\n    visitedNodesInOrder.push(currNode);\n\n    if (currNode === finishNode) return visitedNodesInOrder;\n\n    const unvisitedNeighbours = getUnvisitedNeighbors(currNode, grid);\n\n    for (const neighbor of unvisitedNeighbours) {\n      if (!neighbor.isWall) {\n        q.enqueue(neighbor);\n        neighbor.visited = true;\n        neighbor.previousNode = currNode;\n        neighbor.distance = 0;\n      }\n    }\n  }\n}\n\n// function BFScommented(grid, startNode, finishNode) {\n//   //check for illegal inputs\n//   if (!startNode || !finishNode || startNode === finishNode) {\n//     return false;\n//   }\n//   const visitedNodesInOrder = [];\n//   var q = new Queue(); //create a new queue\n\n//   //initialize the start node distance to 0 and add it to the queue\n//   startNode.distance = 0;\n//   q.enqueue(startNode);\n\n//   while (q.length !== 0) {\n//     var currNode = q.dequeue();\n\n//     //guard against invalid nodes\n//     if (typeof currNode === \"undefined\") return visitedNodesInOrder;\n\n//     //if the node is a wall, repeat the loop again\n//     if (currNode.isWall) continue;\n\n//     //mark the node as visited and add it to the list of visited nodes\n//     currNode.visited = true;\n//     visitedNodesInOrder.push(currNode);\n\n//     //if the current node equals the finish node, return the list of visited nodes\n//     if (currNode === finishNode) return visitedNodesInOrder;\n\n//     //get univisited neighbors of the current node and add them to the queue\n//     const unvisitedNeighbours = getUnvisitedNeighbors(currNode, grid);\n//     for (const neighbor of unvisitedNeighbours) {\n//       if (!neighbor.isWall) {\n//         q.enqueue(neighbor);\n//         neighbor.visited = true;\n//         neighbor.previousNode = currNode;\n//       }\n//     }\n//   }\n// }\n\n/*\n\nQueue.js\n\nA function to represent a queue\n\nCreated by Kate Morley - http://code.iamkate.com/ - and released under the terms\nof the CC0 1.0 Universal legal code:\n\nhttp://creativecommons.org/publicdomain/zero/1.0/legalcode\n\n*/\n\nfunction Queue() {\n  // initialise the queue and offset\n  var queue = [];\n  var offset = 0;\n\n  // Returns the length of the queue.\n  this.getLength = function() {\n    return queue.length - offset;\n  };\n\n  // Returns true if the queue is empty, and false otherwise.\n  this.isEmpty = function() {\n    return queue.length === 0;\n  };\n\n  /* Enqueues the specified item. The parameter is:\n   *\n   * item - the item to enqueue\n   */\n  this.enqueue = function(item) {\n    queue.push(item);\n  };\n\n  /* Dequeues an item and returns it. If the queue is empty, the value\n   * 'undefined' is returned.\n   */\n  this.dequeue = function() {\n    // if the queue is empty, return immediately\n    if (queue.length === 0) return undefined;\n\n    // store the item at the front of the queue\n    var item = queue[offset];\n\n    // increment the offset and remove the free space if necessary\n    if (++offset * 2 >= queue.length) {\n      queue = queue.slice(offset);\n      offset = 0;\n    }\n\n    // return the dequeued item\n    return item;\n  };\n\n  /* Returns the item at the front of the queue (without dequeuing it). If the\n   * queue is empty then undefined is returned.\n   */\n  this.peek = function() {\n    return queue.length > 0 ? queue[offset] : undefined;\n  };\n}\n","import { getUnvisitedNeighbors } from \"../Algorithms/Dijkstra\";\n\nvar visitedNodesInOrder = [];\nvar finished = 0;\n\nexport function DFS(grid, startNode, finishNode) {\n  visitedNodesInOrder = [];\n  return DFSHelper(grid, startNode, finishNode);\n}\n\nfunction DFSHelper(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n\n  if (startNode.isWall || startNode.visited) return;\n  startNode.visited = true;\n\n  visitedNodesInOrder.push(startNode);\n\n  if (startNode === finishNode) {\n    finished = 1;\n    return visitedNodesInOrder;\n  }\n\n  var unvisitedNeighbours = getUnvisitedNeighbors(startNode, grid);\n\n  for (var neighbour of unvisitedNeighbours) {\n    if (!neighbour.isWall && !neighbour.visited) {\n      neighbour.previousNode = startNode;\n      if (finished === 1) {\n        return visitedNodesInOrder;\n      }\n      DFSHelper(grid, neighbour, finishNode);\n      if (finished === 1) {\n        return visitedNodesInOrder;\n      }\n    }\n  }\n\n  return visitedNodesInOrder;\n}\n\n// // THIS IS ITERATIVE DEPTH FIRST SEARCH USING STACK\n// function DFScommented(grid, startNode, finishNode) {\n//   //check for invalid inputs\n//   if (!startNode || !finishNode || startNode === finishNode) {\n//     return false;\n//   }\n\n//   const visitedNodesInOrder = [];\n//   var s = new Stack(); //create a new stack\n\n//   //initialize the start node distance to 0 and add it to the stack\n//   startNode.distance = 0;\n//   s.push(startNode);\n\n//   while (s.length !== 0) {\n//     var currNode = s.pop();\n\n//     //guard against invalid nodes\n//     if (typeof currNode === \"undefined\") return visitedNodesInOrder;\n\n//     //if the node is a wall, repeat the loop again\n//     if (currNode.isWall) continue;\n\n//     //mark the node as visited and add it to the list of visited nodes\n//     currNode.visited = true;\n//     visitedNodesInOrder.push(currNode);\n\n//     //if the current node equals the finish node, return the list of visited nodes\n//     if (currNode === finishNode) return visitedNodesInOrder;\n\n//     //get univisited neighbors of the current node and add them to the stack\n//     const unvisitedNeighbours = getUnvisitedNeighbors(currNode, grid);\n//     for (const neighbor of unvisitedNeighbours) {\n//       if (!neighbor.isWall) {\n//         s.push(neighbor);\n//         neighbor.visited = true;\n//         neighbor.previousNode = currNode;\n//       }\n//     }\n//   }\n// }\n\n// /*\n\n//   stack.js\n\n//   A function to represent a stack\n\n//   Created by Kate Morley - http://code.iamkate.com/ - and released under the terms\n//   of the CC0 1.0 Universal legal code:\n\n//   http://creativecommons.org/publicdomain/zero/1.0/legalcode\n\n//   */\n// class Stack {\n//   constructor() {\n//     // initialise the stack and offset\n//     var stack = [];\n//     // Returns the length of the stack.\n//     this.getLength = function() {\n//       return stack.length;\n//     };\n//     // Returns true if the stack is empty, and false otherwise.\n//     this.isEmpty = function() {\n//       return stack.length() === 0;\n//     };\n//     /* Enstacks the specified item. The parameter is:\n//      *\n//      * item - the item to enstack\n//      */\n//     this.push = function(item) {\n//       stack.push(item);\n//     };\n//     /* Destacks an item and returns it. If the stack is empty, the value\n//      * 'undefined' is returned.\n//      */\n//     this.pop = function() {\n//       // if the stack is empty, return immediately\n//       if (stack.length === 0) return undefined;\n//       // return the destackd item\n//       return stack.pop();\n//     };\n//     /* Returns the item at the front of the stack (without desueuing it). If the\n//      * stack is empty then undefined is returned.\n//      */\n//     this.peek = function() {\n//       return stack.length > 0 ? stack[stack.length() - 1] : undefined;\n//     };\n//   }\n// }\n","import { getUnvisitedNeighbors } from \"./Dijkstra\";\nimport {\n  NUM_COLUMNS,\n  NUM_ROWS\n} from \"../PathfindingVisualizer/PathfindingVisualizer\";\n\nvar MAX_DEPTH = 0;\nvar visitedNodesInOrder = [];\nvar finished = 0;\n\nexport function IDDFS(grid, startNode, finishNode) {\n  visitedNodesInOrder = [];\n  MAX_DEPTH = NUM_COLUMNS * NUM_ROWS;\n\n  for (let i = 0; i <= MAX_DEPTH; i++) {\n    //var newgrid = JSON.parse(JSON.stringify(grid));\n    //console.log(grid);\n    //var bool = DLS(newgrid, startNode, finishNode, i);\n    var bool = DLS(grid, startNode, finishNode, i);\n    if (bool === true) return visitedNodesInOrder;\n    visitedNodesInOrder = resetVisitedNodes(visitedNodesInOrder);\n    //console.log(visitedNodesInOrder);\n  }\n\n  return visitedNodesInOrder;\n}\n\nfunction resetVisitedNodes(visited) {\n  for (var node of visited) {\n    node.visited = false;\n  }\n  return visited;\n}\n\nfunction DLS(grid, startNode, finishNode, limit) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n\n  if (startNode === finishNode) {\n    finished = 1;\n    return true;\n  }\n\n  if (limit <= 0) return false;\n\n  if (startNode.isWall) return false;\n\n  startNode.visited = true;\n  if (!visitedNodesInOrder.includes(startNode)) {\n    visitedNodesInOrder.push(startNode);\n  }\n\n  var unvisitedNeighbours = getUnvisitedNeighbors(startNode, grid);\n\n  for (var neighbour of unvisitedNeighbours) {\n    if (!neighbour.isWall && !neighbour.visited) {\n      neighbour.previousNode = startNode;\n      if (finished === 1) {\n        return true;\n      }\n      if (DLS(grid, neighbour, finishNode, limit - 1)) {\n        return true;\n      }\n      if (finished === 1) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\n// function IDDFScommented(grid, startNode, finishNode) {\n//   visitedNodesInOrder = [];\n//   // set the depth of how far into the graph you want to go\n//   MAX_DEPTH = NUM_COLUMNS * NUM_ROWS;\n\n//   // increase the depth-limit each unsuccessful recursive call where we do not\n//   // reach the finish node\n//   for (let i = 0; i <= MAX_DEPTH; i++) {\n//     var bool = DLS(grid, startNode, finishNode, i);\n//     if (bool === true) return visitedNodesInOrder;\n//     // reset the nodes we visited and return back to the loop to perform DLS again\n//     visitedNodesInOrder = resetVisitedNodes(visitedNodesInOrder);\n//   }\n\n//   return visitedNodesInOrder;\n// }\n\n// function DLS(grid, node, finishNode, limit) {\n//   // check for invalid inputs\n//   if (!node || !finishNode || node === finishNode) {\n//     return false;\n//   }\n\n//   // if we reach the finishNode, mark that we are finished and return true\n//   if (node === finishNode) {\n//     finished = 1;\n//     return true;\n//   }\n\n//   // we are only allowed to traverse a certain depth-limit, once the limit approaches\n//   // zero, we cannot traverse anymore\n//   if (limit <= 0) return false;\n\n//   // if the node is a wall, return\n//   if (node.isWall) return false;\n\n//   // mark the node as visited and add it to the nodes we visited\n//   node.visited = true;\n//   if (!visitedNodesInOrder.includes(node)) {\n//     visitedNodesInOrder.push(node);\n//   }\n\n//   // get the unvisited neighbors of the node and recursively call DLS\n//   // with the depth-limit decremented. If finished has been flagged, we can\n//   // return to IDDFS, otherwise, we keep calling DLS until the finishNode\n//   // has been reached, or that limit has approached 0\n//   var unvisitedNeighbours = getUnvisitedNeighbors(node, grid);\n\n//   for (var neighbour of unvisitedNeighbours) {\n//     if (!neighbour.isWall && !neighbour.visited) {\n//       neighbour.previousNode = node;\n//       if (finished === 1) {\n//         return true;\n//       }\n//       if (DLS(grid, neighbour, finishNode, limit - 1)) {\n//         return true;\n//       }\n//       if (finished === 1) {\n//         return true;\n//       }\n//     }\n//   }\n\n//   return false;\n// }\n\n// export function DLS(grid, startNode, finishNode, limit) {\n//   if (!startNode || !finishNode || startNode === finishNode) {\n//     return false;\n//   }\n\n//   var s = new Stack();\n//   startNode.distance = 0;\n\n//   s.push(startNode);\n\n//   while (s.getLength() !== 0) {\n//     limit--;\n//     if (limit <= 0) {\n//       return false;\n//     }\n\n//     var currNode = s.pop();\n\n//     if (typeof currNode === \"undefined\" || currNode.isWall) return false;\n\n//     currNode.distance = 0;\n//     currNode.visited = true;\n//     visitedNodesInOrder.push(currNode);\n//     if (currNode === finishNode) return true;\n\n//     //getUnivisitedNeighbors returns unvisited neighbors left right up down\n//     const unvisitedNeighbours = getUnvisitedNeighbors(currNode, grid);\n//     console.log(unvisitedNeighbours);\n\n//     for (const neighbor of unvisitedNeighbours) {\n//       if (!neighbor.isWall) {\n//         s.push(neighbor);\n//         neighbor.visited = true;\n//         neighbor.previousNode = currNode;\n//         neighbor.distance = 0;\n//       }\n//     }\n//   }\n//   return false;\n// }\n\n/*\n  \n  stack.js\n  \n  A function to represent a stack\n  \n  Created by Kate Morley - http://code.iamkate.com/ - and released under the terms\n  of the CC0 1.0 Universal legal code:\n  \n  http://creativecommons.org/publicdomain/zero/1.0/legalcode\n  \n  */\n// class Stack {\n//   constructor() {\n//     // initialise the stack and offset\n//     var stack = [];\n//     // Returns the length of the stack.\n//     this.getLength = function() {\n//       return stack.length;\n//     };\n//     // Returns true if the stack is empty, and false otherwise.\n//     this.isEmpty = function() {\n//       return stack.length() === 0;\n//     };\n//     /* Enstacks the specified item. The parameter is:\n//      *\n//      * item - the item to enstack\n//      */\n//     this.push = function(item) {\n//       stack.push(item);\n//     };\n//     /* Destacks an item and returns it. If the stack is empty, the value\n//      * 'undefined' is returned.\n//      */\n//     this.pop = function() {\n//       // if the stack is empty, return immediately\n//       if (stack.length === 0) return undefined;\n//       // return the destackd item\n//       return stack.pop();\n//     };\n//     /* Returns the item at the front of the stack (without desueuing it). If the\n//      * stack is empty then undefined is returned.\n//      */\n//     this.peek = function() {\n//       return stack.length > 0 ? stack[stack.length() - 1] : undefined;\n//     };\n//   }\n// }\n","import { getUnvisitedNeighbors } from \"../Algorithms/Dijkstra\";\nimport Heap from \"heap\";\nvar yetToVisit;\n\n// export function Astar(grid, startNode, finishNode) {\n//   if (!startNode || !finishNode || startNode === finishNode) {\n//     return false;\n//   }\n\n//   const visitedNodesInOrder = [];\n\n//   initializeCosts(grid);\n\n//   startNode.distance = 0;\n\n//   yetToVisit = new Heap(function(a, b) {\n//     return a.fCost - b.fCost;\n//   });\n\n//   startNode.fCost = 0;\n//   startNode.gCost = 0;\n\n//   yetToVisit.push(startNode);\n\n//   //    yetToVisit.heapify();\n\n//   while (yetToVisit.size() > 0) {\n//     //        yetToVisit.heapify();\n\n//     const currNode = yetToVisit.pop();\n\n//     if (typeof currNode === \"undefined\") return visitedNodesInOrder;\n\n//     if (currNode.isWall) continue;\n\n//     currNode.distance = 0;\n\n//     currNode.visited = true;\n\n//     visitedNodesInOrder.push(currNode);\n\n//     if (currNode === finishNode) return visitedNodesInOrder;\n\n//     const unvisitedNeighbours = getUnvisitedNeighbors(currNode, grid);\n\n//     for (const neighbor of unvisitedNeighbours) {\n//       if (!neighbor.isWall) {\n//         const hCost = euclideanDistance(\n//           neighbor.col,\n//           finishNode.col,\n//           neighbor.row,\n//           finishNode.row\n//         );\n\n//         // const gCost = euclideanDistance(\n//         //   neighbor.col,\n//         //   startNode.col,\n//         //   neighbor.row,\n//         //   startNode.row\n//         // );\n\n//         neighbor.gCost = currNode.gCost + 1;\n\n//         if (neighbor.fCost > hCost + neighbor.gCost) {\n//           neighbor.fCost = hCost + neighbor.gCost; //g cost\n//         }\n\n//         //neighbor.fCost = hCost + neighbor.gCost; //g cost\n\n//         neighbor.visited = true;\n//         neighbor.previousNode = currNode;\n\n//         neighbor.distance = 0;\n//         yetToVisit.push(neighbor);\n//       }\n//     }\n//   }\n//   console.log(grid);\n//   return visitedNodesInOrder;\n// }\n\nexport function Astar(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n\n  const visitedNodesInOrder = [];\n\n  yetToVisit = new Heap(function(a, b) {\n    return a.fCost - b.fCost;\n  });\n\n  initializeCosts(grid);\n\n  startNode.fCost = 0;\n  startNode.gCost = 0;\n  startNode.hCost = 0;\n\n  yetToVisit.heapify();\n\n  while (yetToVisit.length !== 0) {\n    const currNode = yetToVisit.pop();\n\n    if (typeof currNode === \"undefined\") return visitedNodesInOrder;\n\n    if (currNode.isWall) continue;\n    if (currNode.fCost === Infinity) return visitedNodesInOrder;\n\n    currNode.visited = true;\n    console.log(currNode);\n\n    visitedNodesInOrder.push(currNode);\n\n    if (currNode === finishNode) return visitedNodesInOrder;\n\n    const unvisitedNeighbours = getUnvisitedNeighbors(currNode, grid);\n\n    for (const neighbor of unvisitedNeighbours) {\n      if (!neighbor.isWall) {\n        let hCost = manhattanDistance(\n          neighbor.col,\n          finishNode.col,\n          neighbor.row,\n          finishNode.row\n        );\n        // if (neighbor.hCost > hCost) {\n        //   neighbor.hCost = hCost;\n        // }\n\n        // if (neighbor.gCost > currNode.gCost + 1) {\n        //   neighbor.gCost = currNode.gCost + 1;\n        // }\n\n        // if (neighbor.fCost > neighbor.hCost + neighbor.gCost) {\n        //   neighbor.fCost = neighbor.hCost + neighbor.gCost;\n        //   neighbor.previousNode = currNode;\n        //   yetToVisit.updateItem(neighbor);\n        // }\n\n        if (currNode.gCost + 1 < neighbor.gCost) {\n          neighbor.hCost = hCost;\n          neighbor.gCost = currNode.gCost + 1;\n          neighbor.fCost = neighbor.hCost + neighbor.gCost;\n          neighbor.previousNode = currNode;\n          yetToVisit.updateItem(neighbor);\n        }\n      }\n    }\n  }\n  console.log(grid);\n  return visitedNodesInOrder;\n}\n\n// function Astarcommented(grid, startNode, finishNode) {\n//   // check for invalid inputs\n//   if (!startNode || !finishNode || startNode === finishNode) {\n//     return false;\n//   }\n//   const visitedNodesInOrder = [];\n\n//   // create a priority queue where heap.pop() is the node with the lowest fCost\n//   yetToVisit = new Heap(function(a, b) {\n//     return a.fCost - b.fCost;\n//   });\n//   initializeCosts(grid); // make all nodes have fCost, gCost, hCost infinity at first\n\n//   // set the costs of the startNode to 0\n//   startNode.fCost = 0;\n//   startNode.gCost = 0;\n//   startNode.hCost = 0;\n\n//   // create a priority queue using a min-heap\n//   yetToVisit.heapify();\n\n//   while (yetToVisit.length !== 0) {\n//     const currNode = yetToVisit.pop();\n\n//     // if node is undefined or current node has fCost of infinity, return list of visited nodes\n//     if (typeof currNode === \"undefined\" || currNode.fCost === Infinity)\n//       return visitedNodesInOrder;\n\n//     // if the node is a wall, perform loop again\n//     if (currNode.isWall) continue;\n\n//     // mark the node as visited and add to the list of visited nodes\n//     currNode.visited = true;\n//     visitedNodesInOrder.push(currNode);\n\n//     // if the node equals the finishNode, return the list of visited nodes\n//     if (currNode === finishNode) return visitedNodesInOrder;\n\n//     // for all unvisited neighbors of the node, calculate h(n),\n//     // we will be using manhattan distance. Then check the condition of g(n) and\n//     // update the costs of the node respectively.\n//     const unvisitedNeighbours = getUnvisitedNeighbors(currNode, grid);\n//     for (const neighbor of unvisitedNeighbours) {\n//       if (!neighbor.isWall) {\n//         let hCost = manhattanDistance(\n//           neighbor.col,\n//           finishNode.col,\n//           neighbor.row,\n//           finishNode.row\n//         );\n\n//         if (currNode.gCost + 1 < neighbor.gCost) {\n//           neighbor.hCost = hCost;\n//           neighbor.gCost = currNode.gCost + 1;\n//           neighbor.fCost = neighbor.hCost + neighbor.gCost;\n//           neighbor.previousNode = currNode;\n//           yetToVisit.updateItem(neighbor);\n//         }\n//       }\n//     }\n//   }\n//   return visitedNodesInOrder;\n// }\n\nexport function euclideanDistance(colA, colB, rowA, rowB) {\n  const a = Math.abs(colA - colB);\n  const b = Math.abs(rowA - rowB);\n  const aSquared = Math.pow(a, 2);\n  const bSquared = Math.pow(b, 2);\n  return Math.pow(aSquared + bSquared, 0.5);\n}\n\nexport function manhattanDistance(colA, colB, rowA, rowB) {\n  const a = Math.abs(colA - colB);\n  const b = Math.abs(rowA - rowB);\n  return a + b;\n}\n\nfunction initializeCosts(grid) {\n  for (let row of grid) {\n    for (let node of row) {\n      node.fCost = Infinity;\n      node.gCost = Infinity;\n      node.hCost = Infinity;\n      yetToVisit.push(node);\n    }\n  }\n}\n","import { getAllFourNeighbors } from \"../Algorithms/Dijkstra\";\n//import Queue from \"../Components/Queue\";\n\nexport var INTERSECT_NODE_ROW;\nexport var INTERSECT_NODE_COL;\n\nexport function biDirectional(grid, startNode, finishNode) {\n  INTERSECT_NODE_ROW = -1;\n  INTERSECT_NODE_COL = -1;\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n\n  const visitedNodesInOrder = [];\n\n  var qStart = new Queue();\n  var qFinish = new Queue();\n  qStart.enqueue(startNode);\n  qFinish.enqueue(finishNode);\n\n  while (qStart.length !== 0 && qFinish.length !== 0) {\n    var currStartNode = qStart.dequeue();\n    var currFinishNode = qFinish.dequeue();\n\n    //        console.log(currStartNode);\n\n    if (typeof currStartNode === \"undefined\") {\n      //            console.log(currStartNode);\n\n      return visitedNodesInOrder;\n    }\n    if (typeof currFinishNode === \"undefined\") {\n      //            console.log(currFinishNode);\n\n      return visitedNodesInOrder;\n    }\n\n    currStartNode.visited = true;\n    currFinishNode.visited = true;\n\n    visitedNodesInOrder.push(currStartNode);\n    visitedNodesInOrder.push(currFinishNode);\n\n    if (isIntersecting(visitedNodesInOrder)) {\n      //            finishNode.previousNode = grid[finishNode.row + 1][finishNode.col];\n      return visitedNodesInOrder;\n    }\n    //        console.log(isIntersecting(visitedNodesInOrder));\n    //        if (currStartNode === finishNode) return visitedNodesInOrder;\n    //        if (currFinishNode === startNode) return visitedNodesInOrder;\n\n    const unvisitedNeighborsStart = getUnvisitedNeighborsStart(\n      currStartNode,\n      grid\n    );\n    const unvisitedNeighborsFinish = getUnvisitedNeighborsFinish(\n      currFinishNode,\n      grid\n    );\n\n    for (const neighbor of unvisitedNeighborsStart) {\n      if (!neighbor.isWall) {\n        //                console.log(neighbor);\n        neighbor.visited = true;\n        neighbor.visitedByStart = true;\n        //                currStartNode.previousNode = neighbor;\n        neighbor.previousNode = currStartNode;\n        qStart.enqueue(neighbor);\n      }\n    }\n\n    for (const neighbor of unvisitedNeighborsFinish) {\n      if (!neighbor.isWall) {\n        //               console.log(neighbor);\n        neighbor.visited = true;\n        neighbor.visitedByFinish = true;\n        //                currFinishNode.previousNode = neighbor;\n        neighbor.previousNode = currFinishNode;\n        qFinish.enqueue(neighbor);\n      }\n    }\n  }\n}\n\n// function biDirectionalCommented(grid, startNode, finishNode) {\n//   INTERSECT_NODE_ROW = -1;\n//   INTERSECT_NODE_COL = -1;\n\n//   // check for invalid inputs\n//   if (!startNode || !finishNode || startNode === finishNode) {\n//     return false;\n//   }\n\n//   const visitedNodesInOrder = [];\n\n//   // have two queues, one for the start node and another for the finish node\n//   // add the start and finish nodes respectively into the queue\n//   var qStart = new Queue();\n//   var qFinish = new Queue();\n//   qStart.enqueue(startNode);\n//   qFinish.enqueue(finishNode);\n\n//   while (qStart.length !== 0 && qFinish.length !== 0) {\n//     var currStartNode = qStart.dequeue();\n//     var currFinishNode = qFinish.dequeue();\n\n//     // mark the two dequeued nodes as visited and add them to the list of visited nodes\n//     currStartNode.visited = true;\n//     currFinishNode.visited = true;\n//     visitedNodesInOrder.push(currStartNode);\n//     visitedNodesInOrder.push(currFinishNode);\n\n//     // if there is an intersection, return the list of visited nodes\n//     if (isIntersecting(visitedNodesInOrder)) {\n//       return visitedNodesInOrder;\n//     }\n\n//     // get the neighboring nodes for the two nodes\n//     const unvisitedNeighborsStart = getUnvisitedNeighborsStart(\n//       currStartNode,\n//       grid\n//     );\n//     const unvisitedNeighborsFinish = getUnvisitedNeighborsFinish(\n//       currFinishNode,\n//       grid\n//     );\n\n//     // for every unvisited neighbor of the two nodes, add them into their respective queues\n//     for (const neighbor of unvisitedNeighborsStart) {\n//       if (!neighbor.isWall) {\n//         neighbor.visited = true;\n//         neighbor.visitedByStart = true;\n//         neighbor.previousNode = currStartNode;\n//         qStart.enqueue(neighbor);\n//       }\n//     }\n//     for (const neighbor of unvisitedNeighborsFinish) {\n//       if (!neighbor.isWall) {\n//         neighbor.visited = true;\n//         neighbor.visitedByFinish = true;\n//         neighbor.previousNode = currFinishNode;\n//         qFinish.enqueue(neighbor);\n//       }\n//     }\n//   }\n// }\n\nfunction isIntersecting(visitedNodesInOrder) {\n  for (var node of visitedNodesInOrder) {\n    //        console.log(node);\n    if (node.visitedByStart && node.visitedByFinish && !node.isWall) {\n      INTERSECT_NODE_ROW = node.row;\n      INTERSECT_NODE_COL = node.col;\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction getUnvisitedNeighborsStart(node, grid) {\n  var neighbors = getAllFourNeighbors(node, grid);\n\n  // keep neighbors that are unvisited OR visited by finishNode\n  return neighbors.filter(\n    neighbor => neighbor.visitedByFinish || !neighbor.visited\n  );\n}\n\nfunction getUnvisitedNeighborsFinish(node, grid) {\n  var neighbors = getAllFourNeighbors(node, grid);\n\n  // keep neighbors that are unvisited OR visited by startNode\n  return neighbors.filter(\n    neighbor => neighbor.visitedByStart || !neighbor.visited\n  );\n}\n\n/*\n\nQueue.js\n\nA function to represent a queue\n\nCreated by Kate Morley - http://code.iamkate.com/ - and released under the terms\nof the CC0 1.0 Universal legal code:\n\nhttp://creativecommons.org/publicdomain/zero/1.0/legalcode\n\n*/\n\nfunction Queue() {\n  // initialise the queue and offset\n  var queue = [];\n  var offset = 0;\n\n  // Returns the length of the queue.\n  this.getLength = function() {\n    return queue.length - offset;\n  };\n\n  // Returns true if the queue is empty, and false otherwise.\n  this.isEmpty = function() {\n    return queue.length === 0;\n  };\n\n  /* Enqueues the specified item. The parameter is:\n   *\n   * item - the item to enqueue\n   */\n  this.enqueue = function(item) {\n    queue.push(item);\n  };\n\n  /* Dequeues an item and returns it. If the queue is empty, the value\n   * 'undefined' is returned.\n   */\n  this.dequeue = function() {\n    // if the queue is empty, return immediately\n    if (queue.length === 0) return undefined;\n\n    // store the item at the front of the queue\n    var item = queue[offset];\n\n    // increment the offset and remove the free space if necessary\n    if (++offset * 2 >= queue.length) {\n      queue = queue.slice(offset);\n      offset = 0;\n    }\n\n    // return the dequeued item\n    return item;\n  };\n\n  /* Returns the item at the front of the queue (without dequeuing it). If the\n   * queue is empty then undefined is returned.\n   */\n  this.peek = function() {\n    return queue.length > 0 ? queue[offset] : undefined;\n  };\n}\n","import { getUnvisitedNeighbors } from \"../Algorithms/Dijkstra\";\nimport Heap from \"heap\";\nimport { euclideanDistance } from \"../Algorithms/Astar\";\n\nvar yetToVisit;\n\nexport function greedyBestFS(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n\n  const visitedNodesInOrder = [];\n\n  yetToVisit = new Heap(function(a, b) {\n    return a.fCost - b.fCost;\n  });\n\n  initializeCosts(grid);\n\n  startNode.fCost = 0;\n\n  yetToVisit.updateItem(startNode);\n  yetToVisit.heapify();\n\n  while (yetToVisit.size() > 0) {\n    const currNode = yetToVisit.pop();\n\n    if (typeof currNode === \"undefined\") return visitedNodesInOrder;\n    if (currNode.fCost === Infinity) return visitedNodesInOrder;\n\n    if (currNode.isWall) continue;\n\n    currNode.visited = true;\n\n    visitedNodesInOrder.push(currNode);\n\n    if (currNode === finishNode) return visitedNodesInOrder;\n\n    const unvisitedNeighbours = getUnvisitedNeighbors(currNode, grid);\n\n    for (const neighbor of unvisitedNeighbours) {\n      if (!neighbor.isWall) {\n        const hCost = euclideanDistance(\n          neighbor.col,\n          finishNode.col,\n          neighbor.row,\n          finishNode.row\n        );\n\n        if (neighbor.fCost > hCost) {\n          neighbor.fCost = hCost; //no g cost\n          neighbor.previousNode = currNode;\n          yetToVisit.updateItem(neighbor);\n        }\n      }\n    }\n  }\n\n  return visitedNodesInOrder;\n}\n\nfunction initializeCosts(grid) {\n  for (let row of grid) {\n    for (let node of row) {\n      node.fCost = Infinity;\n      node.hCost = Infinity;\n      yetToVisit.push(node);\n    }\n  }\n}\n\n//ORIGINAL\n// export function greedyBestFS(grid, startNode, finishNode) {\n//   if (!startNode || !finishNode || startNode === finishNode) {\n//     return false;\n//   }\n\n//   const visitedNodesInOrder = [];\n\n//   startNode.distance = 0;\n\n//   yetToVisit = new Heap(function(a, b) {\n//     return a.fCost - b.fCost;\n//   });\n\n//   startNode.fCost = 0;\n\n//   yetToVisit.push(startNode);\n\n//   //    yetToVisit.heapify();\n\n//   while (yetToVisit.size() > 0) {\n//     //        yetToVisit.heapify();\n\n//     const currNode = yetToVisit.pop();\n\n//     if (typeof currNode === \"undefined\") return visitedNodesInOrder;\n\n//     if (currNode.isWall) continue;\n\n//     currNode.distance = 0;\n\n//     currNode.visited = true;\n\n//     visitedNodesInOrder.push(currNode);\n\n//     if (currNode === finishNode) return visitedNodesInOrder;\n\n//     const unvisitedNeighbours = getUnvisitedNeighbors(currNode, grid);\n\n//     for (const neighbor of unvisitedNeighbours) {\n//       if (!neighbor.isWall) {\n//         const hCost = euclideanDistance(\n//           neighbor.col,\n//           finishNode.col,\n//           neighbor.row,\n//           finishNode.row\n//         );\n\n//         neighbor.fCost = hCost; //no g cost\n\n//         neighbor.visited = true;\n//         neighbor.previousNode = currNode;\n//         neighbor.distance = 0;\n//         yetToVisit.push(neighbor);\n//       }\n//     }\n//   }\n\n//   return visitedNodesInOrder;\n// }\n\n// function greedyBestFScommented(grid, startNode, finishNode) {\n//   // check for invalid inputs\n//   if (!startNode || !finishNode || startNode === finishNode) {\n//     return false;\n//   }\n//   const visitedNodesInOrder = [];\n\n//   // create a priority queue such that yetToVisit.pop() is the node with the lowest fCost\n//   yetToVisit = new Heap(function(a, b) {\n//     return a.fCost - b.fCost;\n//   });\n\n//   // set the hCost and fCost of every node to Infinity\n//   initializeCosts(grid);\n\n//   // add the startNode to priority queue\n//   startNode.fCost = 0;\n//   yetToVisit.updateItem(startNode);\n//   yetToVisit.heapify();\n\n//   while (yetToVisit.size() > 0) {\n//     const currNode = yetToVisit.pop();\n\n//     // if the currNode is undefined of the fCost is Infinity, return the list of visited nodes\n//     if (typeof currNode === \"undefined\") return visitedNodesInOrder;\n//     if (currNode.fCost === Infinity) return visitedNodesInOrder;\n\n//     // if the node is a wall, go back to the loop again\n//     if (currNode.isWall) continue;\n\n//     // mark the node as visited and add it to the list of visited nodes\n//     currNode.visited = true;\n//     visitedNodesInOrder.push(currNode);\n\n//     // if the node equals the finish node, return the list of visited nodes\n//     if (currNode === finishNode) return visitedNodesInOrder;\n\n//     // for all unvisited neighbors of the node, calculate h(n),\n//     // we will be using euclidean distance. Then check the condition of f(n) and\n//     // update the costs of the node respectively.\n//     const unvisitedNeighbours = getUnvisitedNeighbors(currNode, grid);\n//     for (const neighbor of unvisitedNeighbours) {\n//       if (!neighbor.isWall) {\n//         const hCost = euclideanDistance(\n//           neighbor.col,\n//           finishNode.col,\n//           neighbor.row,\n//           finishNode.row\n//         );\n\n//         if (neighbor.hCost > hCost) {\n//           neighbor.fCost = hCost; //no g cost\n//           neighbor.previousNode = currNode;\n//           yetToVisit.updateItem(neighbor);\n//         }\n//       }\n//     }\n//   }\n\n//   return visitedNodesInOrder;\n// }\n","export function simpleMaze(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n\n  const nodesToBeWalls = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      //   if (Math.floor(Math.random() * 8 + 2) <= 4) {\n      //     if (Math.floor(Math.random() * 2)) {\n      //       if (!node.isStart && !node.isFinish) {\n      //         nodesToBeWalls.push(node);\n      //         node.isWall = true;\n      //       }\n      //     }\n      //   }\n\n      if (getRndInteger(0, 100) < 50 && getRndInteger(0, 2) < 1) {\n        if (!node.isStart && !node.isFinish) {\n          nodesToBeWalls.push(node);\n          node.isWall = true;\n        }\n      }\n    }\n  }\n\n  return nodesToBeWalls;\n}\n\nfunction getRndInteger(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n","export function generateMazeAnimations(grid, numRows, numCols) {\n  var animations = [];\n  //mark all nodes as walls.\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      grid[i][j].isWall = true;\n      //            animations.push(grid[i][j]);  //  Do we need to push this??\n    }\n  }\n  //pick random cell, mark it as a room, add the walls of the cell to the wall list\n  const randomRow = getRandomInt(0, numRows - 1);\n  const randomCol = getRandomInt(0, numCols - 1);\n  grid[randomRow][randomCol].isWall = false;\n  animations.push(grid[randomRow][randomCol]); //START NODE\n\n  var listOfFrontierNodes = [];\n\n  getFrontierNodes(\n    grid,\n    listOfFrontierNodes,\n    randomRow,\n    randomCol,\n    numRows,\n    numCols\n  );\n\n  while (listOfFrontierNodes.length !== 0) {\n    var randomFrontierIdx = getRandomInt(0, listOfFrontierNodes.length - 1);\n    var randomFrontierNode = listOfFrontierNodes[randomFrontierIdx]; //random fr\n    randomFrontierNode.isVisited = true;\n    var neighbours = [];\n    getNeighbourNodes(\n      grid,\n      neighbours,\n      randomFrontierNode.row,\n      randomFrontierNode.col,\n      numRows,\n      numCols\n    );\n    var randomNeighbourIdx = getRandomInt(0, neighbours.length - 1);\n    var randomNeighbour = neighbours[randomNeighbourIdx];\n    if (neighbours.length !== 0) {\n      if (randomNeighbour.col === randomFrontierNode.col) {\n        if (randomNeighbour.row - randomFrontierNode.row > 0) {\n          //neighbour is below frontier node\n          grid[randomFrontierNode.row + 1][\n            randomFrontierNode.col\n          ].isWall = false;\n          //        grid[randomFrontierNode.row + 1][randomFrontierNode.col].isVisited = true;\n          animations.push(\n            grid[randomFrontierNode.row + 1][randomFrontierNode.col]\n          );\n        } else {\n          //neighbour is above\n          grid[randomFrontierNode.row - 1][\n            randomFrontierNode.col\n          ].isWall = false;\n          //        grid[randomFrontierNode.row - 1][randomFrontierNode.col].isVisited = true;\n          animations.push(\n            grid[randomFrontierNode.row - 1][randomFrontierNode.col]\n          );\n        }\n      } else {\n        if (randomNeighbour.col - randomFrontierNode.col > 0) {\n          //neighbour is right\n          grid[randomFrontierNode.row][\n            randomFrontierNode.col + 1\n          ].isWall = false;\n          //        grid[randomFrontierNode.row][randomFrontierNode.col + 1].isVisited = true;\n          animations.push(\n            grid[randomFrontierNode.row][randomFrontierNode.col + 1]\n          );\n        } else {\n          //neighbour is left\n          grid[randomFrontierNode.row][\n            randomFrontierNode.col - 1\n          ].isWall = false;\n          //        grid[randomFrontierNode.row][randomFrontierNode.col - 1].isVisited = true;\n          animations.push(\n            grid[randomFrontierNode.row][randomFrontierNode.col - 1]\n          );\n        }\n      }\n    }\n    getFrontierNodes(\n      grid,\n      listOfFrontierNodes,\n      randomFrontierNode.row,\n      randomFrontierNode.col,\n      numRows,\n      numCols\n    );\n    //        listOfFrontierNodes.splice(randomFrontierIdx, 1);\n    // listOfFrontierNodes = listOfFrontierNodes.filter(\n    //   node =>\n    //     node.col !== randomFrontierNode.col &&\n    //     node.row !== randomFrontierNode.row\n    // );\n    //        console.log(listOfFrontierNodes);\n  }\n\n  return animations;\n}\n\nfunction getFrontierNodes(grid, list, row, col, numRows, numCols) {\n  if (\n    row - 2 >= 0 &&\n    grid[row - 2][col].isWall &&\n    !grid[row - 2][col].isVisited\n  ) {\n    //up node is within bounds and is a wall\n    list.push(grid[row - 2][col]);\n    //    grid[row - 2][col].isVisited = true;\n  }\n  if (\n    row + 2 < numRows &&\n    grid[row + 2][col].isWall &&\n    !grid[row + 2][col].isVisited\n  ) {\n    //bottom node is ...\n    list.push(grid[row + 2][col]);\n    //    grid[row + 2][col].isVisited = true;\n  }\n  if (\n    col - 2 >= 0 &&\n    grid[row][col - 2].isWall &&\n    !grid[row][col - 2].isVisited\n  ) {\n    //left node is ...\n    list.push(grid[row][col - 2]);\n    //    grid[row][col - 2].isVisited = true;\n  }\n  if (\n    col + 2 < numCols &&\n    grid[row][col + 2].isWall &&\n    !grid[row][col + 2].isVisited\n  ) {\n    //right node is ...\n    list.push(grid[row][col + 2]);\n    //    grid[row][col + 2].isVisited = true;\n  }\n}\n\nfunction getNeighbourNodes(grid, list, row, col, numRows, numCols) {\n  if (\n    row - 2 >= 0 &&\n    !grid[row - 2][col].isWall &&\n    !grid[row - 2][col].isVisited\n  ) {\n    //up node is within bounds and is a wall\n    list.push(grid[row - 2][col]);\n  }\n  if (\n    row + 2 < numRows &&\n    !grid[row + 2][col].isWall &&\n    !grid[row + 2][col].isVisited\n  ) {\n    //bottom node is ...\n    list.push(grid[row + 2][col]);\n  }\n  if (\n    col - 2 >= 0 &&\n    !grid[row][col - 2].isWall &&\n    !grid[row][col - 2].isVisited\n  ) {\n    //left node is ...\n    list.push(grid[row][col - 2]);\n  }\n  if (\n    col + 2 < numCols &&\n    !grid[row][col + 2].isWall &&\n    !grid[row][col + 2].isVisited\n  ) {\n    //right node is ...\n    list.push(grid[row][col + 2]);\n  }\n}\n\n/*\nexport function generateMazeAnimations(grid, numRows,numCols) {\n    var ds = new DisjointSet(numRows*numCols);\n        //mark all nodes as walls.\n        for (let i = 0; i < numRows; i++) {\n            for (let j = 0; j < numCols; j++) {\n                grid[i][j].isWall = true;\n\n            }\n        }\n\n}\n*/\n\n//From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\n// Returns a random integer between min (inclusive) and max (inclusive).\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n","var nodesToBeWalls = [];\nvar typeOfMaze = \"\";\n\nexport function recursiveDivision(\n  grid,\n  rowStart,\n  rowEnd,\n  colStart,\n  colEnd,\n  orientation,\n  type\n) {\n  nodesToBeWalls = [];\n  typeOfMaze = type;\n\n  recursiveDivisionMaze(grid, rowStart, rowEnd, colStart, colEnd, orientation);\n  return nodesToBeWalls;\n}\n\nexport function recursiveDivisionMaze(\n  grid,\n  rowStart,\n  rowEnd,\n  colStart,\n  colEnd,\n  orientation\n) {\n  if (rowEnd < rowStart || colEnd < colStart) return;\n\n  if (orientation === \"HORIZONTAL\") {\n    let possibleRows = [];\n    for (let number = rowStart; number <= rowEnd; number += 2) {\n      possibleRows.push(number);\n    }\n\n    let possibleCols = [];\n    for (let number = colStart - 1; number <= colEnd + 1; number += 2) {\n      possibleCols.push(number);\n    }\n\n    let randomRowIndex = Math.floor(Math.random() * possibleRows.length);\n    let randomColIndex = Math.floor(Math.random() * possibleCols.length);\n    let currentRow = possibleRows[randomRowIndex];\n    let colRandom = possibleCols[randomColIndex];\n\n    const row = grid[currentRow];\n    for (const node of row) {\n      if (\n        node.row === currentRow &&\n        !node.isStart &&\n        !node.isFinish &&\n        node.col !== colRandom &&\n        !node.visited &&\n        node.col >= colStart - 1 &&\n        node.col <= colEnd + 1\n      ) {\n        console.log(node);\n        node.isWall = true;\n        node.visited = true;\n        nodesToBeWalls.push(node);\n      }\n    }\n\n    if (currentRow - 2 - rowStart > colEnd - colStart) {\n      recursiveDivisionMaze(\n        grid,\n        rowStart,\n        currentRow - 2,\n        colStart,\n        colEnd,\n        switchType(orientation, orientation, \"VERTICAL\")\n      );\n    } else {\n      recursiveDivisionMaze(\n        grid,\n        rowStart,\n        currentRow - 2,\n        colStart,\n        colEnd,\n        switchType(\"VERTICAL\", \"VERTICAL\", \"VERTICAL\")\n      );\n    }\n    if (rowEnd - (currentRow + 2) > colEnd - colStart) {\n      recursiveDivisionMaze(\n        grid,\n        currentRow + 2,\n        rowEnd,\n        colStart,\n        colEnd,\n        switchType(orientation, orientation, \"VERTICAL\")\n      );\n    } else {\n      recursiveDivisionMaze(\n        grid,\n        currentRow + 2,\n        rowEnd,\n        colStart,\n        colEnd,\n        switchType(\"VERTICAL\", \"VERTICAL\", \"VERTICAL\")\n      );\n    }\n  } else {\n    let possibleCols = [];\n    for (let number = colStart; number <= colEnd; number += 2) {\n      possibleCols.push(number);\n    }\n    let possibleRows = [];\n    for (let number = rowStart - 1; number <= rowEnd + 1; number += 2) {\n      possibleRows.push(number);\n    }\n    let randomColIndex = Math.floor(Math.random() * possibleCols.length);\n    let randomRowIndex = Math.floor(Math.random() * possibleRows.length);\n    let currentCol = possibleCols[randomColIndex];\n    let rowRandom = possibleRows[randomRowIndex];\n\n    for (let row = rowStart - 1; row <= rowEnd + 1; row++) {\n      const nodes = grid[row];\n      const node = nodes[currentCol];\n      if (\n        !node.isStart &&\n        !node.isFinish &&\n        node.col === currentCol &&\n        !node.visited &&\n        node.row >= rowStart - 1 &&\n        node.row <= rowEnd + 1 &&\n        node.row !== rowRandom\n      ) {\n        node.visited = true;\n        node.isWall = true;\n        nodesToBeWalls.push(node);\n      }\n    }\n\n    if (rowEnd - rowStart > currentCol - 2 - colStart) {\n      recursiveDivisionMaze(\n        grid,\n        rowStart,\n        rowEnd,\n        colStart,\n        currentCol - 2,\n        switchType(\"HORIZONTAL\", \"HORIZONTAL\", orientation)\n      );\n    } else {\n      recursiveDivisionMaze(\n        grid,\n        rowStart,\n        rowEnd,\n        colStart,\n        currentCol - 2,\n        switchType(orientation, \"HORIZONTAL\", orientation)\n      );\n    }\n    if (rowEnd - rowStart > colEnd - (currentCol + 2)) {\n      recursiveDivisionMaze(\n        grid,\n        rowStart,\n        rowEnd,\n        currentCol + 2,\n        colEnd,\n        switchType(\"HORIZONTAL\", \"HORIZONTAL\", \"HORIZONTAL\")\n      );\n    } else {\n      recursiveDivisionMaze(\n        grid,\n        rowStart,\n        rowEnd,\n        currentCol + 2,\n        colEnd,\n        switchType(orientation, \"HORIZONTAL\", orientation)\n      );\n    }\n  }\n}\n\nfunction switchType(maze1, maze2, maze3) {\n  if (typeOfMaze === \"regularMaze\") {\n    return maze1;\n  } else if (typeOfMaze === \"horizontalMaze\") {\n    return maze2;\n  } else if (typeOfMaze === \"verticalMaze\") {\n    return maze3;\n  }\n}\n\n// export function recursiveDivision(grid, x, y, width, height, orientation) {\n//   nodesToBeWalls = [];\n//   recursiveDivisionHelper(grid, x, y, width, height, orientation);\n//   return nodesToBeWalls;\n// }\n\n// function recursiveDivisionHelper(grid, x, y, width, height, orientation) {\n//   if (width < 4 || height < 4) return;\n\n//   let horizontal = orientation === \"HORIZONTAL\";\n\n//   //where wall is drawn\n//   let wx = x + (horizontal ? 0 : getRndInteger(0, width - 3));\n//   let wy = y + (horizontal ? getRndInteger(0, height - 3) : 0);\n\n//   //passage\n//   let px = wx + (horizontal ? getRndInteger(0, width - 1) : 0);\n//   let py = wy + (horizontal ? 0 : getRndInteger(0, height - 1));\n\n//   //direction of wall\n//   let dx = horizontal ? 1 : 0;\n//   let dy = horizontal ? 0 : 1;\n\n//   //length of wall\n//   let length = horizontal ? width : height;\n\n//   //direction wall is perpendicular to\n//   //let dir = horizontal ? \"S\" : \"E\";\n\n//   console.log(wx, wy, px, py, length, horizontal);\n\n//   for (let i = 0; i < length; i++) {\n//     const node = grid[wy][wx];\n//     if (wx !== px || wy !== py) {\n//       if (\n//         !node.isStart &&\n//         !node.isFinish &&\n//         !node.isVisited &&\n//         //!containsPassage(node, grid) &&\n//         !node.isPassage\n//       ) {\n//         node.isWall = true;\n//         node.isVisited = true;\n//         node.isPassage = false;\n//         nodesToBeWalls.push(node);\n//       }\n//     } else {\n//       node.isPassage = true;\n//     }\n//     wx += dx;\n//     wy += dy;\n//   }\n\n//   //   let nx = x;\n//   //   let ny = y;\n//   //   let w = horizontal ? width : wx - x + 1;\n//   //   let h = horizontal ? wy - y + 1 : height;\n//   //   recursiveDivisionHelper(grid, nx, ny, w, h, chooseOrientation(w, h));\n\n//   //   nx = horizontal ? x : wx + 1;\n//   //   ny = horizontal ? wy + 1 : y;\n//   //   w = horizontal ? width : x + width - wx - 1;\n//   //   h = horizontal ? y + height - wy - 1 : height;\n//   //   recursiveDivisionHelper(grid, nx, ny, w, h, chooseOrientation(w, h));\n\n//   const nx = x;\n//   const ny = y;\n//   const w = horizontal ? width : wx - x + 1;\n//   const h = horizontal ? wy - y + 1 : height;\n//   recursiveDivisionHelper(grid, nx, ny, w, h, chooseOrientation(w, h));\n\n//   const nxx = horizontal ? x : wx + 1;\n//   const nyy = horizontal ? wy + 1 : y;\n//   const ww = horizontal ? width : x + width - wx - 1;\n//   const hh = horizontal ? y + height - wy - 1 : height;\n//   recursiveDivisionHelper(grid, nxx, nyy, ww, hh, chooseOrientation(ww, hh));\n// }\n\n// function getRndInteger(min, max) {\n//   return Math.floor(Math.random() * (max - min + 1)) + min;\n// }\n\n// function chooseOrientation(width, height) {\n//   if (width < height) {\n//     return \"HORIZONTAL\";\n//   } else if (height < width) {\n//     return \"VERTICAL\";\n//   } else {\n//     return getRndInteger(0, 1) === 0 ? \"HORIZONTAL\" : \"VERTICAL\";\n//   }\n// }\n\n// function containsPassage(node, grid) {\n//   var neighbors = getAllFourNeighbors(node, grid);\n//   for (var x of neighbors) {\n//     if (x.isPassage) {\n//       //console.log(\"REACHEDDDD\");\n//       return true;\n//     }\n//   }\n//   return false;\n// }\n\n// function getAllFourNeighbors(node, grid) {\n//   const neighbors = [];\n//   const { col, row } = node;\n//   if (row > 0) neighbors.push(grid[row - 1][col]);\n//   if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n//   if (col > 0) neighbors.push(grid[row][col - 1]);\n//   if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n//   return neighbors;\n// }\n","import React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport \"./PathfindingVisualizer.css\";\nimport {\n  dijkstra,\n  getNodesInShortestPathOrder,\n  getNodesInShortestPathOrderBiDirectional\n} from \"../Algorithms/Dijkstra\";\nimport { BFS } from \"../Algorithms/BFS\";\nimport { DFS } from \"../Algorithms/DFS\";\nimport { IDDFS } from \"../Algorithms/IDDFS\";\nimport { Astar } from \"../Algorithms/Astar\";\nimport {\n  biDirectional,\n  INTERSECT_NODE_COL,\n  INTERSECT_NODE_ROW\n} from \"../Algorithms/BiDirectional\";\nimport { greedyBestFS } from \"../Algorithms/GreedyBestFS\";\nimport { simpleMaze } from \"../Mazes/SimpleMaze\";\nimport { generateMazeAnimations } from \"../Algorithms/GenerateMaze\";\nimport { recursiveDivision } from \"../Mazes/RecursiveDivision\";\n\nimport \"../Components/Button.css\";\nimport \"../Components/Modal.css\";\nimport { displayAlgorithmInfo } from \"../Algorithms/AlgorithmInfo\";\nimport \"../Components/AlgorithmModal.css\";\n\nexport const NUM_COLUMNS = 42;\nexport const NUM_ROWS = 20;\nlet START_NODE_ROW = 4;\nlet START_NODE_COL = 2;\nlet FINISH_NODE_ROW = 13;\nlet FINISH_NODE_COL = 35;\nlet mouseIsPressed = false;\nlet startIsPressed = false;\nlet finishIsPressed = false;\nlet isRunning = false;\nlet slideNumber = 0;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: []\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitalGrid();\n    this.setState({ grid });\n    window.onload = this.displayNote();\n  }\n\n  //document.getElementById changes the HTML image\n  handleMouseDown(row, col) {\n    if (isRunning) return;\n\n    const grid = this.state.grid;\n    mouseIsPressed = true;\n\n    var node = grid[row][col];\n\n    if (node.isStart) {\n      startIsPressed = true;\n      return;\n    }\n    if (node.isFinish) {\n      finishIsPressed = true;\n      return;\n    }\n    node.isWall = !node.isWall;\n    if (node.isWall && !node.isStart && !node.isFinish) {\n      document.getElementById(`node-${node.row}-${node.col}`).className =\n        \"node node-wall\";\n    } else if (!node.isStart && !node.isFinish) {\n      document.getElementById(`node-${node.row}-${node.col}`).className =\n        \"node\";\n    }\n\n    //this.setState({ grid: grid });\n  }\n\n  // what happens here is that we don't set state, so the state isn't updated correclty\n  // not until we use a method that changes the state such as clear or visualize, which then\n  // automatically calls render. However, this still works because the id and fields of the nodes\n  // are changed, we just don't see the reflected change in the state yet.\n  // although we sacrafice a correctly updated state, we can now update walls faster\n  handleMouseEnter(row, col) {\n    if (!mouseIsPressed || isRunning) return;\n\n    var div = document.getElementById(\"grid\");\n    div.onmouseleave = function() {\n      console.log(\"mouse exited\");\n      startIsPressed = false;\n      finishIsPressed = false;\n      mouseIsPressed = false;\n    };\n\n    const grid = this.state.grid;\n    //grid[row][col].isWall = !grid[row][col].isWall;\n    //this.setState({ grid: grid });\n\n    var node = grid[row][col];\n\n    if (startIsPressed) {\n      if (node.isFinish || node.isWall) return;\n      //if (row === START_NODE_ROW && col === START_NODE_COL) return;\n\n      var startNode = grid[START_NODE_ROW][START_NODE_COL];\n      START_NODE_ROW = row;\n      START_NODE_COL = col;\n      document.getElementById(\n        `node-${startNode.row}-${startNode.col}`\n      ).className = \"node\";\n      \n      startNode.isStart = false;\n      startNode.isWall = false;\n      node.isStart = true;\n      node.isWall = false;\n      \n      document.getElementById(`node-${row}-${col}`).className =\n        \"node node-start\";\n      return;\n    } else if (finishIsPressed) {\n      if (node.isStart || node.isWall) return;\n\n      var finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n      document.getElementById(\n        `node-${finishNode.row}-${finishNode.col}`\n      ).className = \"node\";\n      finishNode.isFinish = false;\n      finishNode.isWall = false;\n      node.isFinish = true;\n      node.isWall = false;\n      FINISH_NODE_ROW = row;\n      FINISH_NODE_COL = col;\n      document.getElementById(`node-${node.row}-${node.col}`).className =\n        \"node node-finish\";\n      return;\n    }\n\n    if (node.isStart || node.isFinish) return;\n\n    node.isWall = !node.isWall;\n    if (node.isWall && !node.isStart && !node.isFinish) {\n      document.getElementById(`node-${node.row}-${node.col}`).className =\n        \"node node-wall\";\n    } else if (!node.isStart && !node.isFinish) {\n      document.getElementById(`node-${node.row}-${node.col}`).className =\n        \"node\";\n    }\n  }\n\n  handleMouseUp() {\n    if (isRunning) return;\n    startIsPressed = false;\n    finishIsPressed = false;\n    mouseIsPressed = false;\n    isRunning = false;\n  }\n\n  //document: is the HTML file with all the elements\n  // setTimeout: executes the function after waiting a number of milliseconds\n  animateAlgorithm(\n    visitedNodesInOrder,\n    nodesInShortestPathOrder,\n    isBiDirectional\n  ) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        if (isBiDirectional) {\n          if (nodesInShortestPathOrder.length <= 2) {\n            if (node.row === START_NODE_ROW && node.col === START_NODE_COL) {\n              document.getElementById(\n                `node-${node.row}-${node.col}`\n              ).className = \"node node-visited-invalid-start\";\n            } else if (\n              node.row === FINISH_NODE_ROW &&\n              node.col === FINISH_NODE_COL\n            ) {\n              document.getElementById(\n                `node-${node.row}-${node.col}`\n              ).className = \"node node-visited-invalid-finish\";\n            } else {\n              document.getElementById(\n                `node-${node.row}-${node.col}`\n              ).className = \"node node-visited-invalid\";\n            }\n          } else {\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              \"node node-visited\";\n          }\n        } else {\n          if (nodesInShortestPathOrder.length <= 1) {\n            if (node.row === START_NODE_ROW && node.col === START_NODE_COL) {\n              document.getElementById(\n                `node-${node.row}-${node.col}`\n              ).className = \"node node-visited-invalid-start\";\n            } else {\n              document.getElementById(\n                `node-${node.row}-${node.col}`\n              ).className = \"node node-visited-invalid\";\n            }\n          } else {\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              \"node node-visited\";\n          }\n        }\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    // document.getElementById(\n    //   `node-${START_NODE_ROW}-${START_NODE_COL}`\n    // ).className = \"node node-visited-start\";\n    console.log(isRunning);\n\n    console.log(nodesInShortestPathOrder);\n    if (\n      nodesInShortestPathOrder == null ||\n      nodesInShortestPathOrder.length <= 1\n    ) {\n      document.getElementById(\n        `node-${FINISH_NODE_ROW}-${FINISH_NODE_COL}`\n      ).className = \"node node-visited-invalid-finish\";\n      isRunning = false;\n      return;\n    }\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      //      console.log(isRunning);\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        if (typeof node === \"undefined\") {\n          isRunning = false;\n          return;\n        }\n        if (node.isFinish) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-visited-finish\";\n        } else if (node.isStart) {\n          document.getElementById(\n            `node-${START_NODE_ROW}-${START_NODE_COL}`\n          ).className = \"node node-visited-start\";\n        } else {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-shortest-path\";\n        }\n        if (i === nodesInShortestPathOrder.length - 1) {\n          isRunning = false;\n        }\n      }, 50 * i);\n    }\n  }\n\n  visualizeAlgorithm(algo) {\n    this.clearGridKeepWalls(this.state.grid);\n    if (isRunning) return;\n    isRunning = true;\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n\n    var nodesInShortestPathOrder;\n\n    var visitedNodesInOrder = null;\n    switch (algo) {\n      case 0: {\n        visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n        break;\n      }\n      case 1: {\n        visitedNodesInOrder = BFS(grid, startNode, finishNode);\n        break;\n      }\n      case 2: {\n        visitedNodesInOrder = DFS(grid, startNode, finishNode);\n        break;\n      }\n      case 3: {\n        visitedNodesInOrder = IDDFS(grid, startNode, finishNode);\n        break;\n      }\n      case 4: {\n        visitedNodesInOrder = Astar(grid, startNode, finishNode);\n        break;\n      }\n      case 5: {\n        visitedNodesInOrder = greedyBestFS(grid, startNode, finishNode);\n        break;\n      }\n      case 6: {\n        visitedNodesInOrder = biDirectional(grid, startNode, finishNode);\n        nodesInShortestPathOrder = this.biDirectionalHelper(\n          grid,\n          visitedNodesInOrder\n        );\n        break;\n      }\n      default:\n        visitedNodesInOrder = BFS(grid, startNode, finishNode);\n        break;\n    }\n\n    if (algo !== 6)\n      nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n\n    if (visitedNodesInOrder !== false) {\n      console.log(grid);\n      if (algo === 6) {\n        this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder, 1);\n      } else {\n        this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder, 0);\n      }\n    }\n  }\n\n  biDirectionalHelper(grid, visitedNodesInOrder) {\n    var nodesInShortestPathOrder = [];\n    if (\n      typeof INTERSECT_NODE_COL !== \"undefined\" &&\n      typeof INTERSECT_NODE_ROW !== \"undefined\" &&\n      INTERSECT_NODE_ROW !== -1 &&\n      INTERSECT_NODE_COL !== -1\n    ) {\n      const intersectNode = grid[INTERSECT_NODE_ROW][INTERSECT_NODE_COL];\n      //get first branch from intersection Node\n      const nodesInShortestPathOrder1 = getNodesInShortestPathOrder(\n        intersectNode\n      );\n      //find second branch from one of 4 nodes beside intersection node\n      const nodesInShortestPathOrder2 = this.findSecondBranch(\n        grid,\n        nodesInShortestPathOrder1,\n        visitedNodesInOrder\n      );\n      //combine first and second branch to form shortest path\n      const nodesInShortestPathOrderCombined = nodesInShortestPathOrder1.concat(\n        nodesInShortestPathOrder2\n      );\n      //console.log(nodesInShortestPathOrder);\n      nodesInShortestPathOrder = nodesInShortestPathOrderCombined;\n    }\n    return nodesInShortestPathOrder;\n  }\n\n  findSecondBranch(grid, firstBranch, visitedNodesInOrder) {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n\n    let rightBesideIntersectNode = null;\n    let rightWithinBounds = true;\n    if (INTERSECT_NODE_COL + 1 >= NUM_COLUMNS) rightWithinBounds = false;\n    else\n      rightBesideIntersectNode =\n        grid[INTERSECT_NODE_ROW][INTERSECT_NODE_COL + 1];\n\n    let belowBesideIntersectNode = null;\n    let belowWithinBounds = true;\n    if (INTERSECT_NODE_ROW + 1 >= NUM_ROWS) belowWithinBounds = false;\n    else\n      belowBesideIntersectNode =\n        grid[INTERSECT_NODE_ROW + 1][INTERSECT_NODE_COL];\n\n    let leftBesideIntersectNode = null;\n    let leftWithinBounds = true;\n    if (INTERSECT_NODE_COL - 1 < 0) leftWithinBounds = false;\n    else\n      leftBesideIntersectNode =\n        grid[INTERSECT_NODE_ROW][INTERSECT_NODE_COL - 1];\n\n    let aboveBesideIntersectNode = null;\n    let aboveWithinBounds = true;\n    if (INTERSECT_NODE_ROW - 1 < 0) aboveWithinBounds = false;\n    else\n      aboveBesideIntersectNode =\n        grid[INTERSECT_NODE_ROW - 1][INTERSECT_NODE_COL];\n\n    let nodesInShortestPathOrderTestRight = [];\n\n    if (rightWithinBounds) {\n      nodesInShortestPathOrderTestRight = getNodesInShortestPathOrderBiDirectional(\n        rightBesideIntersectNode,\n        visitedNodesInOrder\n      );\n    }\n    let nodesInShortestPathOrderTestBelow = [];\n    if (belowWithinBounds) {\n      nodesInShortestPathOrderTestBelow = getNodesInShortestPathOrderBiDirectional(\n        belowBesideIntersectNode,\n        visitedNodesInOrder\n      );\n    }\n    let nodesInShortestPathOrderTestLeft = [];\n    if (leftWithinBounds) {\n      nodesInShortestPathOrderTestLeft = getNodesInShortestPathOrderBiDirectional(\n        leftBesideIntersectNode,\n        visitedNodesInOrder\n      );\n    }\n    let nodesInShortestPathOrderTestAbove = [];\n    if (aboveWithinBounds) {\n      nodesInShortestPathOrderTestAbove = getNodesInShortestPathOrderBiDirectional(\n        aboveBesideIntersectNode,\n        visitedNodesInOrder\n      );\n    }\n\n    if (this.arrayContainsGivenNode(firstBranch, startNode)) {\n      //first branch leads to startNode\n      //we check all test branches, to see if they lead to finish Node. if they do, return it\n      if (\n        rightWithinBounds &&\n        this.arrayContainsGivenNode(\n          nodesInShortestPathOrderTestRight,\n          finishNode\n        )\n      )\n        return nodesInShortestPathOrderTestRight;\n\n      if (\n        belowWithinBounds &&\n        this.arrayContainsGivenNode(\n          nodesInShortestPathOrderTestBelow,\n          finishNode\n        )\n      )\n        return nodesInShortestPathOrderTestBelow;\n\n      if (\n        leftWithinBounds &&\n        this.arrayContainsGivenNode(\n          nodesInShortestPathOrderTestLeft,\n          finishNode\n        )\n      )\n        return nodesInShortestPathOrderTestLeft;\n\n      if (\n        aboveWithinBounds &&\n        this.arrayContainsGivenNode(\n          nodesInShortestPathOrderTestAbove,\n          finishNode\n        )\n      )\n        return nodesInShortestPathOrderTestAbove;\n    } else {\n      //first branch leads to finishNode\n      // we check all test branches, to see if they lead to start node. if they do, return it\n      if (\n        this.arrayContainsGivenNode(\n          rightWithinBounds && nodesInShortestPathOrderTestRight,\n          startNode\n        )\n      )\n        return nodesInShortestPathOrderTestRight;\n\n      if (\n        this.arrayContainsGivenNode(\n          belowWithinBounds && nodesInShortestPathOrderTestBelow,\n          startNode\n        )\n      )\n        return nodesInShortestPathOrderTestBelow;\n\n      if (\n        leftWithinBounds &&\n        this.arrayContainsGivenNode(nodesInShortestPathOrderTestLeft, startNode)\n      )\n        return nodesInShortestPathOrderTestLeft;\n\n      if (\n        aboveWithinBounds &&\n        this.arrayContainsGivenNode(\n          nodesInShortestPathOrderTestAbove,\n          startNode\n        )\n      )\n        return nodesInShortestPathOrderTestAbove;\n    }\n  }\n  /*\n      //we check each path to see if it both DOES NOT contain the first branch and leads to the Start or Finish Node\n      //if both condition holds, we have found second branch and we return it.\n      if (!this.arrayContainsGivenNode(firstBranch, rightBesideIntersectNode) && this.arrayContainsStartOrFinishNode(nodesInShortestPathOrderTestRight)) {\n        return nodesInShortestPathOrderTestRight;\n      }\n      if (!this.arrayContainsGivenNode(firstBranch, belowBesideIntersectNode) && this.arrayContainsStartOrFinishNode(nodesInShortestPathOrderTestBelow)) {\n        return nodesInShortestPathOrderTestBelow;\n      }\n      if (!this.arrayContainsGivenNode(firstBranch, leftBesideIntersectNode) && this.arrayContainsStartOrFinishNode(nodesInShortestPathOrderTestLeft)) {\n        return nodesInShortestPathOrderTestLeft;\n      }\n      if (!this.arrayContainsGivenNode(firstBranch, aboveBesideIntersectNode) && this.arrayContainsStartOrFinishNode(nodesInShortestPathOrderTestAbove)) {\n        return nodesInShortestPathOrderTestAbove;\n      }\n  \n    }\n  */\n  arrayContainsGivenNode(array, node) {\n    if (array === []) return false;\n    for (let element of array) {\n      if (element.row === node.row && element.col === node.col) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /*\n    arrayContainsStartOrFinishNode(array) {\n      for (const node of array) {\n        if ((node.row == START_NODE_ROW && node.col == START_NODE_COL) || (node.row == FINISH_NODE_ROW && node.col == FINISH_NODE_COL)) {\n          return true\n        }\n      }\n      return false;\n  \n  \n    }\n  */\n\n  visualizeWalls(maze) {\n    this.clearGrid();\n    if (isRunning) return;\n    isRunning = true;\n    //const { grid } = this.state;\n    const grid = clearGridHelper();\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    var nodesToBeWalls = null;\n    switch (maze) {\n      case 0: {\n        // nodesToBeWalls = primm(grid, startNode, finishNode);\n        // mazeWalls = getNodesInShortestPathOrder(finishNode);\n        //console.log(grid);\n\n        nodesToBeWalls = simpleMaze(grid, startNode, finishNode);\n        break;\n      }\n\n      case 1: {\n        console.log(grid);\n\n        nodesToBeWalls = recursiveDivision(\n          grid,\n          1,\n          NUM_ROWS - 2,\n          1,\n          NUM_COLUMNS - 2,\n          \"HORIZONTAL\",\n          \"regularMaze\"\n        );\n        console.log(grid);\n        break;\n      }\n\n      case 2: {\n        nodesToBeWalls = recursiveDivision(\n          grid,\n          1,\n          NUM_ROWS - 2,\n          1,\n          NUM_COLUMNS - 2,\n          \"VERTICAL\",\n          \"verticalMaze\"\n        );\n        break;\n      }\n\n      case 3: {\n        nodesToBeWalls = recursiveDivision(\n          grid,\n          1,\n          NUM_ROWS - 2,\n          1,\n          NUM_COLUMNS - 2,\n          \"HORIZONTAL\",\n          \"horizontalMaze\"\n        );\n        break;\n      }\n      default: {\n        isRunning = false;\n        break;\n      }\n    }\n\n    if (nodesToBeWalls !== null) {\n      this.animateWalls(nodesToBeWalls, grid);\n    }\n  }\n\n  animateWalls(nodesToBeWalls, grid) {\n    for (let i = 0; i <= nodesToBeWalls.length; i++) {\n      setTimeout(() => {\n        const node = nodesToBeWalls[i];\n        if (typeof node !== \"undefined\") {\n          if (!node.isStart && !node.isFinish && node.isWall) {\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              \"node node-wall\";\n          }\n        }\n\n        if (i === nodesToBeWalls.length - 1) {\n          isRunning = false;\n          this.setState({ grid: grid });\n        }\n      }, 10 * i);\n    }\n  }\n\n  clearGrid() {\n    if (isRunning) return;\n    const newgrid = clearGridHelper();\n    this.setState({ grid: newgrid });\n    return newgrid;\n  }\n\n  clearGridKeepWalls(grid) {\n    if (isRunning) return;\n    const newgrid = clearGridHelperKeepWalls(grid);\n    this.setState({ grid: newgrid });\n  }\n\n  refreshPage() {\n    window.location.reload();\n  }\n\n  openHelpMenu() {\n    //make new jsx and css page for the helper menu\n    // make sure background is not interactable when help menu is open\n    // add X button to close\n    // describe algorithms, link github repo site, add tutorial how to work, add motivation why we made the application\n    // Get the modal\n    var modal = document.getElementById(\"helpMenu\");\n    modal.style.display = \"block\";\n\n    // Get the button that opens the modal\n    var btn = document.getElementById(\"info-button\");\n\n    // Get the <span> element that closes the modal\n    var span = document.getElementsByClassName(\"close\")[0];\n\n    console.log(modal, btn, span);\n\n    // When the user clicks on <span> (x), close the modal\n    span.onclick = function() {\n      modal.style.display = \"none\";\n    };\n\n    // When the user clicks anywhere outside of the modal, close it\n    window.onclick = function(event) {\n      if (event.target === modal) {\n        modal.style.display = \"none\";\n      }\n    };\n    this.changeText(0);\n  }\n\n  changeText(next) {\n    const MAXSLIDE = 5;\n    const MINSLIDE = 1;\n\n    if (next === 1) {\n      if (slideNumber === MAXSLIDE) {\n        slideNumber = MAXSLIDE;\n      } else {\n        slideNumber += next;\n      }\n    } else if(next===-1){\n      if (slideNumber === MINSLIDE) {\n        slideNumber = MINSLIDE;\n      } else {\n        slideNumber += next;\n      }\n    } else {\n      slideNumber = MINSLIDE;\n    }\n    switch (slideNumber) {\n      case 1: {\n        document.getElementById(\"helpMenu-content\").innerHTML =\n          this.HTMLHelper(MAXSLIDE) +\n          `\n        <h2 style= \"margin-top: -0.3em;\"> Welcome to our Pathfinding Visualizer </h2> \n        <h3 style= \"margin-top: -0.7em;\"> Made by Ryan L. and Eric K.</h3>\n        <p> Our pathfinding application simulates multiple pathfinding algorithms. Pathfinding algorithms \n        attempt to compute the shortest path from one point to another. Pathfinding is a fundamental component used in the world every day, from using\n         Google maps to find the shortest route, to directing autonomous robots to minimize the amount of turning, braking or specific application requirements. Our application\n         simulates a maze with walls. </p>\n        <p> Click on <strong>Next</strong> to continue the tutorial. Otherwise click anywhere outside the box, or the <strong>X</strong> button to play around with our application</p>\n        <p><img style=\"display: block; margin-left: auto; margin-right: auto; margin-top: -2.8em;\" src=\"https://i.ibb.co/P9fVVW8/slide0-png.png\" alt=\"\" width=\"225\" height=\"235\" /></p>`;\n        break;\n      }\n\n      case 2: {\n        document.getElementById(\"helpMenu-content\").innerHTML =\n          this.HTMLHelper(MAXSLIDE) +\n          `<h2 style= \"margin-top: -0.3em;\">Motivation</h2>\n        <p> We wanted to make this application because after taking a beginner's algorithms and data structures course, both of \n        us were amazed by the idea of pathfinding. We created this app to help others understand how certain algorithms \n        explore and compute the shortest path using visual animations. We also hope this application motivates others\n        to explore other algorithms we have not covered and to research more about the applications and possibilities of\n        pathfinding in the real world!</p>\n        <p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://image.flaticon.com/icons/png/512/584/584641.png\" alt=\"\" width=\"129\" height=\"129\" /></p>`;\n        break;\n      }\n\n      case 3: {\n        document.getElementById(\"helpMenu-content\").innerHTML =\n          this.HTMLHelper(MAXSLIDE) +\n          `<h2 style= \"margin-top: -0.3em;\"> How to Use </h2>\n        <p style = \"line-height: 1.15em;\"> Click and drag anywhere on the grid to draw some walls. You can also \n        drag and move the start and end nodes to your desired location. On the left side, select the algorithm\n        you want to visualize. If there is no path from the start node to the end node, the path will be <span style = \"color: red;\"> <strong>red</strong></span>. Otherwise, the path will be <span style = \"color: yellow;\"> <strong>yellow</strong></span> and the area explored by the algorithm\n        will be <span style = \"color: green;\"> <strong>green</strong></span>. Press <strong>Clear Board</strong> if you want to start from scratch, or <Strong>Clear Path</strong> if you want to visualize another algorithm with the same walls.\n        We also made templates of mazes at the top of our application. Finally, click on the <strong>?</strong> button to view this tutorial again.</p>\n\n        <table style=\"height: 108px; width: 190px; margin-left: auto; margin-right: auto;\">\n        <tbody>\n        <tr style=\"height: 33.8px;\">\n        <td style=\"width: 65px; height: 33.8px; text-align: center;\"><img src=\"https://icons-for-free.com/iconfiles/png/512/double+arrow+doublechevronright+right+arrows+icon-1320185729292506033.png\" alt=\"\" width=\"27\" height=\"27\" /></td>\n        <td style=\"width: 116px; height: 33.8px; text-align: left;\">= startNode</td>\n        </tr>\n        <tr style=\"height: 17px;\">\n        <td style=\"width: 65px; height: 17px; text-align: center;\"><img src=\"https://i.pinimg.com/originals/ba/3f/f2/ba3ff2209d0c43655116b31f8e2bbd65.png\" alt=\"\" width=\"27\" height=\"27\" /></td>\n        <td style=\"width: 116px; height: 17px; text-align: left;\">= finishNode</td>\n        </tr>\n        </tbody>\n        </table>\n        <p>&nbsp;</p>\n        `;\n        break;\n      }\n\n      case 4: {\n        document.getElementById(\"helpMenu-content\").innerHTML =\n          this.HTMLHelper(MAXSLIDE) +\n          `<h2 style= \"margin-top: -0.3em;\"> Algorithm Information </h2>\n          <table>\n          <tbody>\n          <tr>\n          <td><img src=\"https://i.imgur.com/fnhxgNj.jpg\" alt=\"\" width=\"59\" height=\"60\" /></td>\n          <td>\n          <p style=\"text-align: left; padding-left: 10px\">Click on this icon beside any pathfinding algorithm to view details about&nbsp;how to use the algorithm, the time complexity, and detailed commented code about how the algorithm works. Feel free to go to our Github repository on the next page to see more implementation details</p>\n          </td>\n          </tr>\n          </tbody>\n          </table>\n        `;\n        break;\n      }\n\n      case 5: {\n        document.getElementById(\"helpMenu-content\").innerHTML =\n          this.HTMLHelper(MAXSLIDE) +\n          `<h2 style= \"margin-top: -0.3em;\"> Last Words </h2>\n          <p> We hope you have fun with this application. Please feel free to contact any of us for feedback on the application. You\n          can also check out our Github source code at <a href = \"https://github.com/ericrkuo/Pathfinding\" target=\"_blank\">Pathfinding Visualizer</a> </p>          \n          <p>*Note: if your screen is small and the proportions of the maze seem wrong, use CTRL – to zoom out</p>\n          <table style=\"height: 227px; margin-left: auto; margin-right: auto; width: 552px;\">\n          <tbody>\n          <tr>\n          <td style=\"width: 157px;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://i.ibb.co/V9qg42q/Eric-Kuo-UBC-Card.jpg\" alt=\"\" width=\"110\" height=\"147\" /></td>\n          <td style=\"width: 199px;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://image.flaticon.com/icons/png/512/87/87090.png\" alt=\"\" width=\"152\" height=\"152\" /></td>\n          <td style=\"width: 179px;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://i.ibb.co/jgZ7fF9/81928054-601968013933600-5665482190398423040-n.jpg\" alt=\"\" width=\"130\" height=\"147\" /></td>\n          </tr>\n          <tr>\n          <td style=\"width: 157px; text-align: center;\"><a href=\"https://www.linkedin.com/in/eric-k-1198b6192/\" target = \"_blank\">LinkedIn Eric Kuo</a></td>\n          <td style=\"width: 199px; text-align: center;\">&nbsp;</td>\n          <td style=\"width: 179px; text-align: center;\"><a href=\"https://www.linkedin.com/in/ryan-liu18/\" target = \"_blank\">LinkedIn Ryan Liu</a></td>\n          </tr>\n          </tbody>\n          </table>\n        `;\n        break;\n      }\n\n      default:\n        break;\n    }\n\n    var prevBtn = document.getElementById(\"Prev\");\n    var nextBtn = document.getElementById(\"Next\");\n    if (slideNumber === MINSLIDE) {\n      prevBtn.style.backgroundColor = \"lightgrey\";\n      prevBtn.disabled = true;\n      nextBtn.disabled = false;\n      nextBtn.style.backgroundColor = \"hsl(214, 100%, 70%)\";\n    } else if (slideNumber === MAXSLIDE) {\n      nextBtn.disabled = true;\n      nextBtn.style.backgroundColor = \"lightgrey\";\n      prevBtn.disabled = false;\n      prevBtn.style.backgroundColor = \"hsl(214, 100%, 70%)\";\n    } else {\n      console.log(\"reached here\");\n      prevBtn.disabled = false;\n      prevBtn.style.backgroundColor = \"hsl(214, 100%, 70%)\";\n      nextBtn.disabled = false;\n      nextBtn.style.backgroundColor = \"hsl(214, 100%, 70%)\";\n    }\n  }\n\n  HTMLHelper(MAXSLIDE) {\n    return (\n      `<p> ` +\n      slideNumber +\n      `/` +\n      MAXSLIDE +\n      `<p>\n  `\n    );\n  }\n\n  openAlgoMenu(info) {\n    var modal = document.getElementById(\"algo-modal\");\n    modal.style.display = \"block\";\n\n    var modalContent = document.getElementById(\"algo-modal-content\");\n    modalContent.scrollTop = 0;\n\n    // // Get the button that opens the modal\n    // var btn = document.getElementById(\"info-button\");\n\n    // Get the <span> element that closes the modal\n    var span = document.getElementsByClassName(\"algo-close\")[0];\n\n    //console.log(modal, btn, span);\n\n    // When the user clicks on <span> (x), close the modal\n    span.onclick = function() {\n      modal.style.display = \"none\";\n    };\n\n    // When the user clicks anywhere outside of the modal, close it\n    window.onclick = function(event) {\n      if (event.target === modal) {\n        modal.style.display = \"none\";\n      }\n    };\n    document.getElementById(\n      \"algo-modal-content\"\n    ).innerHTML = displayAlgorithmInfo(info);\n  }\n\n  generateMaze() {\n    if (isRunning) return;\n    isRunning = true;\n    const { grid } = this.state;\n    const animations = generateMazeAnimations(grid, NUM_ROWS, NUM_COLUMNS);\n\n    for (let i = 0; i < NUM_ROWS; i++) {\n      for (let j = 0; j < NUM_COLUMNS; j++) {\n        //       setTimeout(() => {\n        const node = grid[i][j];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-wall\";\n        //        }, i * 10);\n      }\n    }\n\n    console.log(animations.length);\n    for (let i = 0; i < animations.length; i++) {\n      setTimeout(() => {\n        const node = animations[i];\n        if (i === 0) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-start\";\n        } else if (i === animations.length - 1) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-finish\";\n          isRunning = false;\n        } else {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node\";\n          console.log(node);\n        }\n      }, 10 * i + 20);\n    }\n  }\n\n  displayNote(){\n    var modal = document.getElementById(\"note-modal\");\n    modal.style.display = \"block\";\n\n    var span = document.getElementsByClassName(\"note-close\")[0];\n\n    //console.log(modal, btn, span);\n\n    // When the user clicks on <span> (x), close the modal\n    span.onclick = function() {\n      modal.style.display = \"none\";\n    };\n\n    // When the user clicks anywhere outside of the modal, close it\n    window.onclick = function(event) {\n      if (event.target === modal) {\n        modal.style.display = \"none\";\n      }\n    };\n  }\n\n  render() {\n    const { grid } = this.state;\n    //console.log(grid);\n\n    // goes through each grid element and visually creates a Node\n    //<Button buttonStyle=\"btn--primary--solid\" buttonSize=\"btn--medium\">Test</Button>\n\n    return (\n      <>\n        <div className=\"title-container\">\n          <div className=\"title\" onClick={() => this.refreshPage()}>\n            Pathfinding Visualizer\n          </div>\n\n          <div className=\"title-button-row\">\n            <button onClick={() => this.visualizeWalls(1)}>\n              {\" \"}\n              Recursive Division{\" \"}\n            </button>\n            <button onClick={() => this.visualizeWalls(0)}> Scatter </button>\n            <button onClick={() => this.visualizeWalls(2)}>\n              {\" \"}\n              Vertical Maze{\" \"}\n            </button>\n            <button onClick={() => this.visualizeWalls(3)}>\n              {\" \"}\n              Horizontal Maze{\" \"}\n            </button>\n            {/* <button onClick={() => this.generateMaze()}> Generate Maze</button> */}\n          </div>\n          <button\n            id=\"info-button\"\n            className=\"info-button\"\n            onClick={() => this.openHelpMenu()}\n          >\n            {\" \"}\n            ?{\" \"}\n          </button>\n        </div>\n\n        <div id=\"helpMenu\" className=\"modal\">\n          <div className=\"modal-container\">\n            <span id=\"close\" className=\"close\">\n              &times;\n            </span>\n            <div className=\"buttons-container\">\n              <div className=\"info-buttons\">\n                <button id=\"Prev\" onClick={() => this.changeText(-1)}>\n                  {\" \"}\n                  Prev{\" \"}\n                </button>\n                <button id=\"Next\" onClick={() => this.changeText(1)}>\n                  {\" \"}\n                  Next{\" \"}\n                </button>\n              </div>\n            </div>\n          </div>\n          <div id=\"helpMenu-content\" className=\"modal-content\"></div>\n        </div>\n\n        <div id=\"algo-modal\" className=\"algo-modal\">\n          <span id=\"algo-close\" className=\"algo-close\">\n            &times;\n          </span>\n          <div id=\"algo-modal-content\" className=\"algo-modal-content\"></div>\n        </div>\n\n        <div id = \"note-modal\"className = \"modal\">\n          <div id=\"note-modal-content\" className = \"note-modal-content\">\n              NOTE: Use CTRL + MINUS (-) if the grid is too large for your screen.\n              <p style = {{fontSize: \"12px\", marginTop: \"-0.1em\"}}> (Click anywhere outside the box or the X to close)</p>\n          </div>\n          <span id=\"note-close\" className=\"note-close\">\n            &times;\n          </span>\n        </div>\n        \n\n        <div className=\"container\">\n          <div className=\"algo-btn-group\">\n            <button onClick={() => this.openAlgoMenu(0)}> &#9432; </button>\n            <button onClick={() => this.openAlgoMenu(1)}> &#9432; </button>\n            <button onClick={() => this.openAlgoMenu(2)}> &#9432; </button>\n            <button onClick={() => this.openAlgoMenu(3)}> &#9432; </button>\n            <button onClick={() => this.openAlgoMenu(4)}> &#9432; </button>\n            <button onClick={() => this.openAlgoMenu(5)}> &#9432; </button>\n            <button onClick={() => this.openAlgoMenu(6)}> &#9432; </button>\n          </div>\n          <div className=\"btn-group\">\n            <button onClick={() => this.visualizeAlgorithm(0)}>\n              Dijkstra's Algorithm\n            </button>\n            <button onClick={() => this.visualizeAlgorithm(1)}>\n              Breadth First Search\n            </button>\n            <button onClick={() => this.visualizeAlgorithm(2)}>\n              Depth First Search\n            </button>\n            <button onClick={() => this.visualizeAlgorithm(3)}>\n              Iterative Deepening DFS\n            </button>\n            <button onClick={() => this.visualizeAlgorithm(4)}>A*</button>\n            <button onClick={() => this.visualizeAlgorithm(5)}>\n              Greedy Best First Search\n            </button>\n\n            <button onClick={() => this.visualizeAlgorithm(6)}>\n              BiDirectional BFS\n            </button>\n\n            <button onClick={() => this.clearGridKeepWalls(grid)}>\n              Clear Path\n            </button>\n            <button id=\"clearGrid\" onClick={() => this.clearGrid()}>\n              Clear Board\n            </button>\n          </div>\n\n          <div className=\"grid\" id=\"grid\">\n            {grid.map((row, rowIdx) => {\n              //go through each row in the grid\n              return (\n                <div key={rowIdx}>\n                  {row.map((node, nodeIdx) => {\n                    // for each node in each row, add styling\n                    const { col, row, isStart, isFinish, isWall } = node;\n                    return (\n                      <Node\n                        key={nodeIdx}\n                        isStart={isStart}\n                        isFinish={isFinish}\n                        col={col}\n                        row={row}\n                        isWall={isWall}\n                        mouseIsPressed={mouseIsPressed}\n                        onMouseDown={(row, col) =>\n                          this.handleMouseDown(row, col)\n                        }\n                        onMouseEnter={(row, col) =>\n                          this.handleMouseEnter(row, col)\n                        }\n                        onMouseUp={() => this.handleMouseUp()}\n                      ></Node>\n                    );\n                  })}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nfunction createNode(col, row) {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    //    visitedByStart: false,\n    //    visitedByFinish: false,\n    distance: Infinity,\n    visited: false,\n    isWall: false,\n    previousNode: null\n  };\n}\n\nfunction getInitalGrid() {\n  const grid = [];\n  for (let row = 0; row < NUM_ROWS; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < NUM_COLUMNS; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n}\n\nfunction clearGridHelper() {\n  const grid = [];\n  for (let row = 0; row < NUM_ROWS; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < NUM_COLUMNS; col++) {\n      var node = createNode(col, row);\n      node.isWall = false;\n\n      if (!node.isFinish && !node.isStart) {\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node\";\n      } else if (node.isFinish) {\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-finish\";\n      } else if (node.isStart) {\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-start\";\n      }\n\n      currentRow.push(node);\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n}\n\nfunction clearGridHelperKeepWalls(ogGrid) {\n  const grid = [];\n  for (let row = 0; row < NUM_ROWS; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < NUM_COLUMNS; col++) {\n      var node = createNode(col, row);\n      //      const {ogGrid} = this.state;\n      if (ogGrid[row][col].isWall) node.isWall = true;\n      //console.log(node);\n\n      if (node.isWall) {\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-wall\";\n      } else if (!node.isFinish && !node.isStart) {\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node\";\n      } else if (node.isFinish) {\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-finish\";\n      } else if (node.isStart) {\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-start\";\n      }\n\n      currentRow.push(node);\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n}\n\n// function getNewGridWithWallToggled(grid, row, col) {\n//   //   const newGrid = grid.slice();\n//   //   const node = newGrid[row][col];\n//   //   const newNode = {\n//   //     ...node,\n//   //     isWall: !node.isWall\n//   //   };\n//   //   newGrid[row][col] = newNode;\n//   //   return newGrid;\n\n//   grid[row][col].isWall = !grid[row][col].isWall;\n//   return grid;\n// }\n","export function displayAlgorithmInfo(info) {\n  switch (info) {\n    case 0: {\n      return `<p style=\"text-align: center;\"><strong>Dijkstra's Algorithm</strong></p>\n      <p style=\"text-align: left;\"><span style=\"text-decoration: underline;\">How it works</span>:</p>\n      <p style=\"text-align: left; padding-left: 30px;\">Dijkstra's algorithm guarantees the shortest path. It is a greedy algorithm that explores unvisited nodes that have the smallest distance from the starting node. The distance/edge weight from one neighbouring node to another is 1. A limitation of Dijkstra's algorithm is that the edge weights have to have a non-negative value.&nbsp;</p>\n      <p style=\"text-align: left;\"><span style=\"text-decoration: underline;\">Time Complexity</span>:(n = number of nodes, m = number of edges, b = branching factor, d = maximum depth)</p>\n      <p style=\"text-align: left; padding-left: 30px;\">Worst case: O(nlogn + mlogn) using a priority queue</p>\n      <p style=\"text-align: left;\"><span style=\"text-decoration: underline;\">Implementation</span>: using a priority queue</p>\n      <p style=\"text-align: left;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://i.imgur.com/huM31J2.png\" alt=\"\" width=\"740\" height=\"1217\" /></p>\n      `;\n    }\n\n    case 1: {\n      return `<p style=\"text-align: center;\"><strong>Breadth-First Search Algorithm</strong></p>\n      <p style=\"text-align: left;\"><span style=\"text-decoration: underline;\">How it works</span>:</p>\n      <p style=\"text-align: left; padding-left: 30px;\">The Breadth-First Search algorithm guarantees the shortest path. It explores all nodes by layers, or in other words, exploring all the neighbouring nodes at a certain level before moving to the next-level neighbour nodes.&nbsp;</p>\n      <p style=\"text-align: left;\"><span style=\"text-decoration: underline;\">Time Complexity</span>: (n = number of nodes, m = number of edges, b = branching factor, d = maximum depth)</p>\n      <p style=\"text-align: left; padding-left: 30px;\">Worst case: O(m+n) or O(b<sup>d</sup>)</p>\n      <p style=\"text-align: left;\"><span style=\"text-decoration: underline;\">Implementation</span>:&nbsp;<br /><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://i.imgur.com/85NSd1y.png\" alt=\"\" width=\"767\" height=\"1096\" /></p>\n      `;\n    }\n\n    case 2: {\n      return `<p style=\"text-align: center;\"><strong>Depth-First Search Algorithm</strong></p>\n      <p style=\"text-align: left;\"><span style=\"text-decoration: underline;\">How it works</span>:</p>\n      <p style=\"text-align: left; padding-left: 30px;\">The Depth-First Search algorithm does not guarantee the shortest path. Depth-First search traverses a maze as deep as far as possible and then comes back to a node to repeat the whole process of going as deep as possible again.&nbsp;</p>\n      <p style=\"text-align: left;\"><span style=\"text-decoration: underline;\">Time Complexity</span>: (n = number of nodes, m = number of edges, b = branching factor, d = maximum depth)</p>\n      <p style=\"text-align: left; padding-left: 30px;\">Worst case: O(m+n) or O(b<sup>d</sup>)</p>\n      <p style=\"text-align: left;\"><span style=\"text-decoration: underline;\">Implementation</span>:&nbsp;</p>\n      <p style=\"text-align: left;\"><br /><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://i.imgur.com/9XT7dsJ.png\" alt=\"\" width=\"800\" height=\"1280\" /></p>\n      `;\n    }\n\n    case 3: {\n      return `<p style=\"text-align: center;\"><strong>Iterative Deepening Depth-First Search Algorithm (IDDFS)</strong></p>\n      <p style=\"text-align: left;\"><span style=\"text-decoration: underline;\">How it works</span>:</p>\n      <p style=\"text-align: left; padding-left: 30px;\">The IDDFS algorithm does not guarantee the shortest path. IDDFS is a depth limited version of depth-first search that is run-repeatedly with increasing depth limits until the goal is found.&nbsp;</p>\n      <p style=\"text-align: left;\"><span style=\"text-decoration: underline;\">Time Complexity</span>: (n = number of nodes, m = number of edges, b = branching factor, d = maximum depth)</p>\n      <p style=\"text-align: left; padding-left: 30px;\">Worst case: O(m+n) or O(b<sup>d</sup>)</p>\n      <p style=\"text-align: left;\"><span style=\"text-decoration: underline;\">Implementation</span>:&nbsp;</p>\n      <p style=\"text-align: left;\"><br /><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://i.imgur.com/3jZpVex.png\" alt=\"\" width=\"748\" height=\"1680\" /></p>`;\n    }\n    case 4: {\n      return `<p style=\"text-align: center;\"><strong>A* Algorithm</strong></p>\n      <p style=\"text-align: left;\"><span style=\"text-decoration: underline;\">How it works</span>:</p>\n      <p line-height = \"1.2em\" style=\"text-align: left; padding-left: 30px;\">The A* algorithm guarantees the shortest path. The algorithm is similar to Dijkstra's algorithm and Breadth-First Search, but A* differs by using heuristics to essentially plan ahead at each step so a more optimal decision is made. The algorithm uses a function f(n) = g(n) + h(n), where f(n) is the total estimated cost of the path through node n, which we will be using to compare and order nodes in the priority queue. g(n) is the exact cost from the start node to n. h(n) is the heuristic part, it is the estimated cost from n to the finish node. Calculating h(n) can be done using Manhattan, Euclidean, or Diagonal distance. We will be using the Manhattan distance. One neat fact about A* is that if h(n) = 0, A* becomes Dijkstra's algorithms.&nbsp;&nbsp;</p>\n      <p style=\"text-align: left;\"><span style=\"text-decoration: underline;\">Time Complexity</span>: (n = number of nodes, m = number of edges, b = branching factor, d = maximum depth)</p>\n      <p style=\"text-align: left; padding-left: 30px;\">The runtime of A* depends on your heuristic function h(n). The more expensive/inefficient h(n) is, the slower A* runs.&nbsp;</p>\n      <p style=\"text-align: left;\"><span style=\"text-decoration: underline;\">Implementation</span>:&nbsp;</p>\n      <p style=\"text-align: left;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://i.imgur.com/p3LvPbF.png\" alt=\"\" width=\"750\" height=\"1670\" /><br /><br /></p>\n      `;\n    }\n    case 5: {\n      return `<p style=\"text-align: center;\"><strong>Greedy Best-First Search Algorithm</strong></p>\n      <p style=\"text-align: left;\"><span style=\"text-decoration: underline;\">How it works</span>:</p>\n      <p style=\"text-align: left; padding-left: 30px;\">Greedy Best-First Search Algorithm does not guarantee the shortest path. It is similar to A*, but the only difference is that f(n) = h(n), so the algorithm evaluates nodes by using only the heuristic function as a guide towards the finish node.&nbsp;</p>\n      <p style=\"text-align: left;\"><span style=\"text-decoration: underline;\">Time Complexity</span>: (n = number of nodes, m = number of edges, b = branching factor, d = maximum depth)</p>\n      <p style=\"text-align: left; padding-left: 30px;\">Worst case: O(b<sup>d</sup>)&nbsp;</p>\n      <p style=\"text-align: left;\"><span style=\"text-decoration: underline;\">Implementation</span>:&nbsp;</p>\n      <p style=\"text-align: left;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://i.imgur.com/0WsX4MR.png\" alt=\"\" width=\"764\" height=\"1624\" /><br /><br /></p>\n      `;\n    }\n    case 6: {\n      return `<p style=\"text-align: center;\"><strong>Bidirectional Breadth-First Search Algorithm</strong></p>\n      <p style=\"text-align: left;\"><span style=\"text-decoration: underline;\">How it works</span>:</p>\n      <p style=\"text-align: left; padding-left: 30px;\">Bidirectional Breadth-First Search Algorithm guarantees the shortest path. It performs Breadth-First Search on both the start and finish nodes and terminates when the two searches intersect with one another.&nbsp;</p>\n      <p style=\"text-align: left;\"><span style=\"text-decoration: underline;\">Time Complexity</span>: (n = number of nodes, m = number of edges, b = branching factor, d = maximum depth)</p>\n      <p style=\"text-align: left; padding-left: 30px;\">Worst case: O(b<sup>d/2</sup>)&nbsp;</p>\n      <p style=\"text-align: left;\"><span style=\"text-decoration: underline;\">Implementation</span>:&nbsp;</p>\n      <p style=\"text-align: left;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://i.imgur.com/yPXxd30.png\" width=\"763\" height=\"1378\" /><br /><br /></p>`;\n    }\n    default: {\n      return `<p>Sorry, an unexpected error occured, please refresh</p>`;\n    }\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport PathfindingVisualizer from \"./PathfindingVisualizer/PathfindingVisualizer\";\n\nfunction App() {\n  document.title = \"Pathfinding\";\n  return (\n    <div className=\"App\" id=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}